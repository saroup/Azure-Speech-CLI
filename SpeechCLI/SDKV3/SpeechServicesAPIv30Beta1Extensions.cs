// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Speech
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;
    using File = Models.File;

    /// <summary>
    /// Extension methods for SpeechServicesAPIv30Beta1.
    /// </summary>
    public static partial class SpeechServicesAPIv30Beta1Extensions
    {
            /// <summary>
            /// Gets a list of keywords for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetKeywordDatasets(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.GetKeywordDatasetsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of keywords for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetKeywordDatasetsAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeywordDatasetsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the keyword identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the keyword.
            /// </param>
            public static object GetKeywordDataset(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetKeywordDatasetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the keyword identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the keyword.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetKeywordDatasetAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeywordDatasetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified keyword.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the keyword.
            /// </param>
            public static DeleteKeywordDatasetHeaders DeleteKeywordDataset(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.DeleteKeywordDatasetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified keyword.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the keyword.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteKeywordDatasetHeaders> DeleteKeywordDatasetAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteKeywordDatasetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Updates the mutable details of the keyword dataset identified by its ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the keyword dataset.
            /// </param>
            /// <param name='datasetUpdate'>
            /// The updated values for the keyword dataset.
            /// </param>
            public static object UpdateKeywordDataset(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, KeywordDatasetUpdate datasetUpdate)
            {
                return operations.UpdateKeywordDatasetAsync(id, datasetUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the mutable details of the keyword dataset identified by its ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the keyword dataset.
            /// </param>
            /// <param name='datasetUpdate'>
            /// The updated values for the keyword dataset.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateKeywordDatasetAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, KeywordDatasetUpdate datasetUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateKeywordDatasetWithHttpMessagesAsync(id, datasetUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of supported locales for keywords.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetKeywordSupportedLocalesForDatasets(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.GetKeywordSupportedLocalesForDatasetsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of supported locales for keywords.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetKeywordSupportedLocalesForDatasetsAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeywordSupportedLocalesForDatasetsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of keywords for specified project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            public static object GetKeywordDatasetsForProject(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetKeywordDatasetsForProjectAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of keywords for specified project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetKeywordDatasetsForProjectAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeywordDatasetsForProjectWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the files of the keyword identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the keyword.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            public static object GetKeywordDatasetFiles(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? sasValidity = default(int?))
            {
                return operations.GetKeywordDatasetFilesAsync(id, sasValidity).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the files of the keyword identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the keyword.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetKeywordDatasetFilesAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? sasValidity = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeywordDatasetFilesWithHttpMessagesAsync(id, sasValidity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new keyword.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CreateKeywordDatasetHeaders CreateKeywordDataset(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.CreateKeywordDatasetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new keyword.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateKeywordDatasetHeaders> CreateKeywordDatasetAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateKeywordDatasetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets a list of keyword model details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetKeywordModels(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.GetKeywordModelsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of keyword model details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetKeywordModelsAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeywordModelsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new keyword model object.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelDefinition'>
            /// </param>
            public static CreateKeywordModelHeaders CreateKeywordModel(this ISpeechServicesAPIv30Beta1 operations, KeywordModelDefinition modelDefinition)
            {
                return operations.CreateKeywordModelAsync(modelDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new keyword model object.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelDefinition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateKeywordModelHeaders> CreateKeywordModelAsync(this ISpeechServicesAPIv30Beta1 operations, KeywordModelDefinition modelDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateKeywordModelWithHttpMessagesAsync(modelDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets specified keyword model details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetKeywordModel(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetKeywordModelAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets specified keyword model details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetKeywordModelAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeywordModelWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the keyword model with the given id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the keyword model.
            /// </param>
            public static DeleteKeywordModelHeaders DeleteKeywordModel(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.DeleteKeywordModelAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the keyword model with the given id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the keyword model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteKeywordModelHeaders> DeleteKeywordModelAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteKeywordModelWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Updates the metadata of the keyword model identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the keyword model.
            /// </param>
            /// <param name='modelUpdate'>
            /// The updated values for the keyword model.
            /// </param>
            public static object UpdateKeywordModel(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, ModelUpdate modelUpdate)
            {
                return operations.UpdateKeywordModelAsync(id, modelUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the metadata of the keyword model identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the keyword model.
            /// </param>
            /// <param name='modelUpdate'>
            /// The updated values for the keyword model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateKeywordModelAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, ModelUpdate modelUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateKeywordModelWithHttpMessagesAsync(id, modelUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of supported locales for keyword models.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetKeywordSupportedLocalesForModels(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.GetKeywordSupportedLocalesForModelsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of supported locales for keyword models.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetKeywordSupportedLocalesForModelsAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeywordSupportedLocalesForModelsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the files of the keyword model identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the keyword model.
            /// </param>
            public static object GetKeywordModelFiles(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetKeywordModelFilesAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the files of the keyword model identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the keyword model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetKeywordModelFilesAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeywordModelFilesWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of keyword models for specified project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            public static object GetKeywordModelsForProject(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetKeywordModelsForProjectAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of keyword models for specified project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetKeywordModelsForProjectAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeywordModelsForProjectWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the accuracy test identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the accuracy test.
            /// </param>
            public static object GetAccuracyTest(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetAccuracyTestAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the accuracy test identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the accuracy test.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAccuracyTestAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAccuracyTestWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the accuracy test identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the accuracy test.
            /// </param>
            public static DeleteAccuracyTestHeaders DeleteAccuracyTest(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.DeleteAccuracyTestAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the accuracy test identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the accuracy test.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteAccuracyTestHeaders> DeleteAccuracyTestAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAccuracyTestWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Updates the mutable details of the test identified by its id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the accuracy test.
            /// </param>
            /// <param name='testUpdate'>
            /// The object containing the updated fields of the test.
            /// </param>
            public static object UpdateAccuracyTest(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, TestUpdate testUpdate)
            {
                return operations.UpdateAccuracyTestAsync(id, testUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the mutable details of the test identified by its id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the accuracy test.
            /// </param>
            /// <param name='testUpdate'>
            /// The object containing the updated fields of the test.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateAccuracyTestAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, TestUpdate testUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateAccuracyTestWithHttpMessagesAsync(id, testUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of supported locales for accuracy tests.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSupportedLocalesForAccuracyTests(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.GetSupportedLocalesForAccuracyTestsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of supported locales for accuracy tests.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSupportedLocalesForAccuracyTestsAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupportedLocalesForAccuracyTestsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of accuracy tests for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of tests that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of tests that will be included after skipping.
            /// </param>
            public static object GetAccuracyTests(this ISpeechServicesAPIv30Beta1 operations, int? skip = default(int?), int? top = default(int?))
            {
                return operations.GetAccuracyTestsAsync(skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of accuracy tests for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of tests that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of tests that will be included after skipping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAccuracyTestsAsync(this ISpeechServicesAPIv30Beta1 operations, int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAccuracyTestsWithHttpMessagesAsync(skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new accuracy test.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testDefinition'>
            /// The details of the new accuracy test.
            /// </param>
            public static object CreateAccuracyTest(this ISpeechServicesAPIv30Beta1 operations, AccuracyTest testDefinition)
            {
                return operations.CreateAccuracyTestAsync(testDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new accuracy test.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testDefinition'>
            /// The details of the new accuracy test.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateAccuracyTestAsync(this ISpeechServicesAPIv30Beta1 operations, AccuracyTest testDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAccuracyTestWithHttpMessagesAsync(testDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets one specific file (identified with fileId) from an accuracy test
            /// (identified with id).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the accuracy test.
            /// </param>
            /// <param name='fileId'>
            /// The identifier of the file.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            public static object GetAccuracyTestFile(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, System.Guid fileId, int? sasValidity = default(int?))
            {
                return operations.GetAccuracyTestFileAsync(id, fileId, sasValidity).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets one specific file (identified with fileId) from an accuracy test
            /// (identified with id).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the accuracy test.
            /// </param>
            /// <param name='fileId'>
            /// The identifier of the file.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object>GetAccuracyTestFileAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, System.Guid fileId, int? sasValidity = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAccuracyTestFileWithHttpMessagesAsync(id, fileId, sasValidity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the files of the accuracy test identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the accuracy test.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            /// <param name='skip'>
            /// Number of files that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of files that will be included after skipping.
            /// </param>
            public static object GetAccuracyTestFiles(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? sasValidity = default(int?), int? skip = default(int?), int? top = default(int?))
            {
                return operations.GetAccuracyTestFilesAsync(id, sasValidity, skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the files of the accuracy test identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the accuracy test.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            /// <param name='skip'>
            /// Number of files that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of files that will be included after skipping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAccuracyTestFilesAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? sasValidity = default(int?), int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAccuracyTestFilesWithHttpMessagesAsync(id, sasValidity, skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets status of the specified dataset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetDatasetFromDonation(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetDatasetFromDonationAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets status of the specified dataset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDatasetFromDonationAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetFromDonationWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create dataset from donation data.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='internalDatasetFromDonationDefinition'>
            /// </param>
            public static CreateDatasetFromDonationHeaders CreateDatasetFromDonation(this ISpeechServicesAPIv30Beta1 operations, InternalDataImportFromDonationDefinition internalDatasetFromDonationDefinition)
            {
                return operations.CreateDatasetFromDonationAsync(internalDatasetFromDonationDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create dataset from donation data.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='internalDatasetFromDonationDefinition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateDatasetFromDonationHeaders> CreateDatasetFromDonationAsync(this ISpeechServicesAPIv30Beta1 operations, InternalDataImportFromDonationDefinition internalDatasetFromDonationDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDatasetFromDonationWithHttpMessagesAsync(internalDatasetFromDonationDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets the dataset identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the dataset.
            /// </param>
            public static object GetDataset(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetDatasetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the dataset identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the dataset.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDatasetAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified dataset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the dataset.
            /// </param>
            public static DeleteDatasetHeaders DeleteDataset(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.DeleteDatasetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified dataset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the dataset.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteDatasetHeaders> DeleteDatasetAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDatasetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Updates the mutable details of the dataset identified by its ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the dataset.
            /// </param>
            /// <param name='datasetUpdate'>
            /// The updated values for the dataset.
            /// </param>
            public static object UpdateDataset(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, DatasetUpdate datasetUpdate)
            {
                return operations.UpdateDatasetAsync(id, datasetUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the mutable details of the dataset identified by its ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the dataset.
            /// </param>
            /// <param name='datasetUpdate'>
            /// The updated values for the dataset.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateDatasetAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, DatasetUpdate datasetUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDatasetWithHttpMessagesAsync(id, datasetUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of supported locales for data imports.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSupportedLocalesForDatasets(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.GetSupportedLocalesForDatasetsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of supported locales for data imports.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSupportedLocalesForDatasetsAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupportedLocalesForDatasetsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of datasets for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of datasets that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of datasets that will be included after skipping.
            /// </param>
            public static object GetDatasets(this ISpeechServicesAPIv30Beta1 operations, int? skip = default(int?), int? top = default(int?))
            {
                return operations.GetDatasetsAsync(skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of datasets for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of datasets that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of datasets that will be included after skipping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDatasetsAsync(this ISpeechServicesAPIv30Beta1 operations, int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetsWithHttpMessagesAsync(skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Uploads and creates a new dataset by getting the data from a specified URL.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataset'>
            /// Definition for the new dataset.
            /// </param>
            public static object CreateDataset(this ISpeechServicesAPIv30Beta1 operations, Dataset dataset)
            {
                return operations.CreateDatasetAsync(dataset).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads and creates a new dataset by getting the data from a specified URL.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataset'>
            /// Definition for the new dataset.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateDatasetAsync(this ISpeechServicesAPIv30Beta1 operations, Dataset dataset, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDatasetWithHttpMessagesAsync(dataset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets one specific file (identified with fileId) from a dataset (identified
            /// with id).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the dataset.
            /// </param>
            /// <param name='fileId'>
            /// The identifier of the file.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            public static object GetDatasetFile(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, System.Guid fileId, int? sasValidity = default(int?))
            {
                return operations.GetDatasetFileAsync(id, fileId, sasValidity).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets one specific file (identified with fileId) from a dataset (identified
            /// with id).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the dataset.
            /// </param>
            /// <param name='fileId'>
            /// The identifier of the file.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object>GetDatasetFileAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, System.Guid fileId, int? sasValidity = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetFileWithHttpMessagesAsync(id, fileId, sasValidity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the files of the dataset identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the dataset.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            /// <param name='skip'>
            /// Number of files that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of files that will be included after skipping.
            /// </param>
            public static object GetDatasetFiles(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? sasValidity = default(int?), int? skip = default(int?), int? top = default(int?))
            {
                return operations.GetDatasetFilesAsync(id, sasValidity, skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the files of the dataset identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the dataset.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            /// <param name='skip'>
            /// Number of files that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of files that will be included after skipping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDatasetFilesAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? sasValidity = default(int?), int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetFilesWithHttpMessagesAsync(id, sasValidity, skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Uploads data and creates a new dataset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The optional string representation of a project ID. If set, the dataset
            /// will be associated with that project.
            /// </param>
            /// <param name='name'>
            /// The name of this data import (always add this string for any import).
            /// </param>
            /// <param name='description'>
            /// Optional description of this data import.
            /// </param>
            /// <param name='locale'>
            /// The locale of this data import (always add this string for any import).
            /// </param>
            /// <param name='dataImportKind'>
            /// The kind of the data import (always add this string for any import).
            /// Possible values include: 'None', 'Language', 'Acoustic', 'Pronunciation',
            /// 'CustomVoice', 'AudioFiles', 'KeywordAudioTranscript'
            /// </param>
            /// <param name='properties'>
            /// Optional properties of this data import (json serialized object with
            /// key/values, where all values must be strings)
            /// </param>
            /// <param name='audiodata'>
            /// A zip file containing the audio data and a text file containing the
            /// transcriptions for the audio data (only this file for acoustic data
            /// imports).
            /// </param>
            /// <param name='languagedata'>
            /// A text file containing the language or pronunciation data (only this file
            /// for language data imports).
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static object UploadDatasetFromForm(this ISpeechServicesAPIv30Beta1 operations, string projectId = default(string), string name = default(string), string description = default(string), string locale = default(string), string dataImportKind = default(string), string properties = default(string), Stream audiodata = default(Stream), Stream languagedata = default(Stream))
            {
                return operations.UploadDatasetFromFormAsync(projectId, name, description, locale, dataImportKind, properties, audiodata, languagedata).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads data and creates a new dataset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The optional string representation of a project ID. If set, the dataset
            /// will be associated with that project.
            /// </param>
            /// <param name='name'>
            /// The name of this data import (always add this string for any import).
            /// </param>
            /// <param name='description'>
            /// Optional description of this data import.
            /// </param>
            /// <param name='locale'>
            /// The locale of this data import (always add this string for any import).
            /// </param>
            /// <param name='dataImportKind'>
            /// The kind of the data import (always add this string for any import).
            /// Possible values include: 'None', 'Language', 'Acoustic', 'Pronunciation',
            /// 'CustomVoice', 'AudioFiles', 'KeywordAudioTranscript'
            /// </param>
            /// <param name='properties'>
            /// Optional properties of this data import (json serialized object with
            /// key/values, where all values must be strings)
            /// </param>
            /// <param name='audiodata'>
            /// A zip file containing the audio data and a text file containing the
            /// transcriptions for the audio data (only this file for acoustic data
            /// imports).
            /// </param>
            /// <param name='languagedata'>
            /// A text file containing the language or pronunciation data (only this file
            /// for language data imports).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task<object> UploadDatasetFromFormAsync(this ISpeechServicesAPIv30Beta1 operations, string projectId = default(string), string name = default(string), string description = default(string), string locale = default(string), string dataImportKind = default(string), string properties = default(string), Stream audiodata = default(Stream), Stream languagedata = default(Stream), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadDatasetFromFormWithHttpMessagesAsync(projectId, name, description, locale, dataImportKind, properties, audiodata, languagedata, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the endpoint identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint.
            /// </param>
            public static object GetEndpoint(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetEndpointAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the endpoint identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetEndpointAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEndpointWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the endpoint identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint.
            /// </param>
            public static DeleteEndpointHeaders DeleteEndpoint(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.DeleteEndpointAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the endpoint identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteEndpointHeaders> DeleteEndpointAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteEndpointWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Updates the metadata of the endpoint identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='endpointUpdate'>
            /// The updated values for the endpoint.
            /// </param>
            public static object UpdateEndpoint(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, EndpointUpdate endpointUpdate)
            {
                return operations.UpdateEndpointAsync(id, endpointUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the metadata of the endpoint identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='endpointUpdate'>
            /// The updated values for the endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateEndpointAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, EndpointUpdate endpointUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateEndpointWithHttpMessagesAsync(id, endpointUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of supported locales for endpoint creations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSupportedLocalesForEndpoints(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.GetSupportedLocalesForEndpointsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of supported locales for endpoint creations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSupportedLocalesForEndpointsAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupportedLocalesForEndpointsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of endpoints for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of endpoints that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of endpoints that will be included after skipping.
            /// </param>
            public static object GetEndpoints(this ISpeechServicesAPIv30Beta1 operations, int? skip = default(int?), int? top = default(int?))
            {
                return operations.GetEndpointsAsync(skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of endpoints for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of endpoints that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of endpoints that will be included after skipping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetEndpointsAsync(this ISpeechServicesAPIv30Beta1 operations, int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEndpointsWithHttpMessagesAsync(skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// The details of the endpoint.
            /// </param>
            public static object CreateEndpoint(this ISpeechServicesAPIv30Beta1 operations, Endpoint endpoint)
            {
                return operations.CreateEndpointAsync(endpoint).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// The details of the endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateEndpointAsync(this ISpeechServicesAPIv30Beta1 operations, Endpoint endpoint, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateEndpointWithHttpMessagesAsync(endpoint, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns an endpoint manifest which can be used in an on-premise container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelId'>
            /// The ID of the model to generate an endpoint manifest for.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            public static CreateEndpointManifestHeaders CreateEndpointManifest(this ISpeechServicesAPIv30Beta1 operations, System.Guid modelId, int? sasValidity = default(int?))
            {
                return operations.CreateEndpointManifestAsync(modelId, sasValidity).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns an endpoint manifest which can be used in an on-premise container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelId'>
            /// The ID of the model to generate an endpoint manifest for.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateEndpointManifestHeaders> CreateEndpointManifestAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid modelId, int? sasValidity = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateEndpointManifestWithHttpMessagesAsync(modelId, sasValidity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets a specific audio or transcription log for a given endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='logId'>
            /// The identifier of the log.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            public static object GetEndpointLog(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, string logId, int? sasValidity = default(int?))
            {
                return operations.GetEndpointLogAsync(id, logId, sasValidity).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a specific audio or transcription log for a given endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='logId'>
            /// The identifier of the log.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object>GetEndpointLogAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, string logId, int? sasValidity = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEndpointLogWithHttpMessagesAsync(id, logId, sasValidity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes one audio or transcription log that have been stored for a given
            /// endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='logId'>
            /// The identifier of the log.
            /// </param>
            public static DeleteEndpointLogHeaders DeleteEndpointLog(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, string logId)
            {
                return operations.DeleteEndpointLogAsync(id, logId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes one audio or transcription log that have been stored for a given
            /// endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='logId'>
            /// The identifier of the log.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteEndpointLogHeaders> DeleteEndpointLogAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, string logId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteEndpointLogWithHttpMessagesAsync(id, logId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets a specific audio or transcription log for the default base model in a
            /// given language.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locale'>
            /// The language used to select the default base model.
            /// </param>
            /// <param name='logId'>
            /// The identifier of the log.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            public static object GetBaseModelLog(this ISpeechServicesAPIv30Beta1 operations, string locale, string logId, int? sasValidity = default(int?))
            {
                return operations.GetBaseModelLogAsync(locale, logId, sasValidity).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a specific audio or transcription log for the default base model in a
            /// given language.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locale'>
            /// The language used to select the default base model.
            /// </param>
            /// <param name='logId'>
            /// The identifier of the log.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object>GetBaseModelLogAsync(this ISpeechServicesAPIv30Beta1 operations, string locale, string logId, int? sasValidity = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBaseModelLogWithHttpMessagesAsync(locale, logId, sasValidity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes one audio or transcription log that have been stored when using the
            /// default base model of a given language.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locale'>
            /// The language used to select the default base model.
            /// </param>
            /// <param name='logId'>
            /// The identifier of the log.
            /// </param>
            public static DeleteBaseModelLogHeaders DeleteBaseModelLog(this ISpeechServicesAPIv30Beta1 operations, string locale, string logId)
            {
                return operations.DeleteBaseModelLogAsync(locale, logId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes one audio or transcription log that have been stored when using the
            /// default base model of a given language.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locale'>
            /// The language used to select the default base model.
            /// </param>
            /// <param name='logId'>
            /// The identifier of the log.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteBaseModelLogHeaders> DeleteBaseModelLogAsync(this ISpeechServicesAPIv30Beta1 operations, string locale, string logId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteBaseModelLogWithHttpMessagesAsync(locale, logId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets the list of audio and transcription logs that have been stored for a
            /// given endpoint on a specific day, month, or year.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='date'>
            /// The date of the logs (specific year, month, or day, UTC).
            /// Expected format: ""yyyy", "yyyy-mm", or "yyyy-mm-dd" (e.g. "2020",
            /// "2020-01", or "2020-01-13").
            /// Gets all logs when date is not specified.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            /// <param name='skipToken'>
            /// Token to skip logs that were already retrieved in previous requests.
            /// Pagination starts from beginning when not defined.
            /// </param>
            /// <param name='top'>
            /// Number of files that will be included (between 1 and 5000).
            /// </param>
            public static object GetEndpointLogs(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, string date = default(string), int? sasValidity = default(int?), string skipToken = default(string), int? top = default(int?))
            {
                return operations.GetEndpointLogsAsync(id, date, sasValidity, skipToken, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of audio and transcription logs that have been stored for a
            /// given endpoint on a specific day, month, or year.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='date'>
            /// The date of the logs (specific year, month, or day, UTC).
            /// Expected format: ""yyyy", "yyyy-mm", or "yyyy-mm-dd" (e.g. "2020",
            /// "2020-01", or "2020-01-13").
            /// Gets all logs when date is not specified.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            /// <param name='skipToken'>
            /// Token to skip logs that were already retrieved in previous requests.
            /// Pagination starts from beginning when not defined.
            /// </param>
            /// <param name='top'>
            /// Number of files that will be included (between 1 and 5000).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetEndpointLogsAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, string date = default(string), int? sasValidity = default(int?), string skipToken = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEndpointLogsWithHttpMessagesAsync(id, date, sasValidity, skipToken, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the audio and transcription logs that have been stored for a given
            /// endpoint on a specific day, month, or year.
            /// </summary>
            /// <remarks>
            /// Deletion will happen in the background and can take up to a day.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='date'>
            /// The date of the logs to delete (specific year, month, or day, UTC).
            /// Expected format: ""yyyy", "yyyy-mm", or "yyyy-mm-dd" (e.g. "2020",
            /// "2020-01", or "2020-01-13").
            /// Deletes all logs when date is not specified.
            /// </param>
            public static DeleteEndpointLogsHeaders DeleteEndpointLogs(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, string date = default(string))
            {
                return operations.DeleteEndpointLogsAsync(id, date).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the audio and transcription logs that have been stored for a given
            /// endpoint on a specific day, month, or year.
            /// </summary>
            /// <remarks>
            /// Deletion will happen in the background and can take up to a day.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='date'>
            /// The date of the logs to delete (specific year, month, or day, UTC).
            /// Expected format: ""yyyy", "yyyy-mm", or "yyyy-mm-dd" (e.g. "2020",
            /// "2020-01", or "2020-01-13").
            /// Deletes all logs when date is not specified.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteEndpointLogsHeaders> DeleteEndpointLogsAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, string date = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteEndpointLogsWithHttpMessagesAsync(id, date, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets the list of audio and transcription logs that have been stored when
            /// using the default base model of a given language on a specific day, month,
            /// or year.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locale'>
            /// The language used to select the default base model.
            /// </param>
            /// <param name='date'>
            /// The date of the logs (specific year, month, or day, UTC).
            /// Expected format: ""yyyy", "yyyy-mm", or "yyyy-mm-dd" (e.g. "2020",
            /// "2020-01", or "2020-01-13").
            /// Gets all logs when date is not specified.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            /// <param name='skipToken'>
            /// Token to skip logs that were already retrieved in previous requests.
            /// Pagination starts from beginning when not defined.
            /// </param>
            /// <param name='top'>
            /// Number of files that will be included (between 1 and 5000).
            /// </param>
            public static object GetBaseModelLogs(this ISpeechServicesAPIv30Beta1 operations, string locale, string date = default(string), int? sasValidity = default(int?), string skipToken = default(string), int? top = default(int?))
            {
                return operations.GetBaseModelLogsAsync(locale, date, sasValidity, skipToken, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of audio and transcription logs that have been stored when
            /// using the default base model of a given language on a specific day, month,
            /// or year.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locale'>
            /// The language used to select the default base model.
            /// </param>
            /// <param name='date'>
            /// The date of the logs (specific year, month, or day, UTC).
            /// Expected format: ""yyyy", "yyyy-mm", or "yyyy-mm-dd" (e.g. "2020",
            /// "2020-01", or "2020-01-13").
            /// Gets all logs when date is not specified.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            /// <param name='skipToken'>
            /// Token to skip logs that were already retrieved in previous requests.
            /// Pagination starts from beginning when not defined.
            /// </param>
            /// <param name='top'>
            /// Number of files that will be included (between 1 and 5000).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetBaseModelLogsAsync(this ISpeechServicesAPIv30Beta1 operations, string locale, string date = default(string), int? sasValidity = default(int?), string skipToken = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBaseModelLogsWithHttpMessagesAsync(locale, date, sasValidity, skipToken, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the audio and transcription logs that have been stored when using
            /// the default base model of a given language on a specific day, month, or
            /// year.
            /// </summary>
            /// <remarks>
            /// Deletion will happen in the background and can take up to a day.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locale'>
            /// The language used to select the default base model.
            /// </param>
            /// <param name='date'>
            /// The date of the logs to delete (specific year, month, or day, UTC).
            /// Expected format: ""yyyy", "yyyy-mm", or "yyyy-mm-dd" (e.g. "2020",
            /// "2020-01", or "2020-01-13").
            /// Deletes all logs when date is not specified.
            /// </param>
            public static DeleteBaseModelLogsHeaders DeleteBaseModelLogs(this ISpeechServicesAPIv30Beta1 operations, string locale, string date = default(string))
            {
                return operations.DeleteBaseModelLogsAsync(locale, date).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the audio and transcription logs that have been stored when using
            /// the default base model of a given language on a specific day, month, or
            /// year.
            /// </summary>
            /// <remarks>
            /// Deletion will happen in the background and can take up to a day.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locale'>
            /// The language used to select the default base model.
            /// </param>
            /// <param name='date'>
            /// The date of the logs to delete (specific year, month, or day, UTC).
            /// Expected format: ""yyyy", "yyyy-mm", or "yyyy-mm-dd" (e.g. "2020",
            /// "2020-01", or "2020-01-13").
            /// Deletes all logs when date is not specified.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteBaseModelLogsHeaders> DeleteBaseModelLogsAsync(this ISpeechServicesAPIv30Beta1 operations, string locale, string date = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteBaseModelLogsWithHttpMessagesAsync(locale, date, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets the model identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the model.
            /// </param>
            public static object GetModel(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetModelAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the model identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetModelAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetModelWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the model identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the model.
            /// </param>
            public static DeleteModelHeaders DeleteModel(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.DeleteModelAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the model identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteModelHeaders> DeleteModelAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteModelWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Updates the metadata of the model identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the model.
            /// </param>
            /// <param name='modelUpdate'>
            /// The updated values for the model.
            /// </param>
            public static object UpdateModel(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, ModelUpdate modelUpdate)
            {
                return operations.UpdateModelAsync(id, modelUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the metadata of the model identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the model.
            /// </param>
            /// <param name='modelUpdate'>
            /// The updated values for the model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateModelAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, ModelUpdate modelUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateModelWithHttpMessagesAsync(id, modelUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of supported locales for model adaptation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSupportedLocalesForModels(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.GetSupportedLocalesForModelsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of supported locales for model adaptation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSupportedLocalesForModelsAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupportedLocalesForModelsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the base model identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the base model.
            /// </param>
            public static object GetBaseModel(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetBaseModelAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the base model identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the base model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetBaseModelAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBaseModelWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of custom models for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of models that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of models that will be included after skipping.
            /// </param>
            public static object GetModels(this ISpeechServicesAPIv30Beta1 operations, int? skip = default(int?), int? top = default(int?))
            {
                return operations.GetModelsAsync(skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of custom models for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of models that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of models that will be included after skipping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetModelsAsync(this ISpeechServicesAPIv30Beta1 operations, int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetModelsWithHttpMessagesAsync(skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new model.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelDefinition'>
            /// The details of the new model.
            /// </param>
            public static object CreateModel(this ISpeechServicesAPIv30Beta1 operations, Model modelDefinition)
            {
                return operations.CreateModelAsync(modelDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new model.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelDefinition'>
            /// The details of the new model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateModelAsync(this ISpeechServicesAPIv30Beta1 operations, Model modelDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateModelWithHttpMessagesAsync(modelDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of base models for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of models that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of models that will be included after skipping.
            /// </param>
            public static object GetBaseModels(this ISpeechServicesAPIv30Beta1 operations, int? skip = default(int?), int? top = default(int?))
            {
                return operations.GetBaseModelsAsync(skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of base models for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of models that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of models that will be included after skipping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object>GetBaseModelsAsync(this ISpeechServicesAPIv30Beta1 operations, int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBaseModelsWithHttpMessagesAsync(skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Copies a model from one subscription to another.
            /// </summary>
            /// <remarks>
            /// This method can be used to copy a model from one location to another. If
            /// the target subcription
            /// key belongs to a subscription created for another location, the model will
            /// be copied to that location.
            /// The location header in the response will direct to the model in the target
            /// location.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the model that will be copied.
            /// </param>
            /// <param name='modelCopyDefinition'>
            /// The body contains the subscription key of the target subscription.
            /// </param>
            public static object CopyModel(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, ModelCopy modelCopyDefinition)
            {
                return operations.CopyModelAsync(id, modelCopyDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Copies a model from one subscription to another.
            /// </summary>
            /// <remarks>
            /// This method can be used to copy a model from one location to another. If
            /// the target subcription
            /// key belongs to a subscription created for another location, the model will
            /// be copied to that location.
            /// The location header in the response will direct to the model in the target
            /// location.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the model that will be copied.
            /// </param>
            /// <param name='modelCopyDefinition'>
            /// The body contains the subscription key of the target subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CopyModelAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, ModelCopy modelCopyDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CopyModelWithHttpMessagesAsync(id, modelCopyDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the project identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            public static object GetProject(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetProjectAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the project identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetProjectAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProjectWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the project identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            public static DeleteProjectHeaders DeleteProject(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.DeleteProjectAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the project identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteProjectHeaders> DeleteProjectAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteProjectWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Updates the project identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='projectUpdate'>
            /// The updated values for the project.
            /// </param>
            public static object UpdateProject(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, ProjectUpdate projectUpdate)
            {
                return operations.UpdateProjectAsync(id, projectUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the project identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='projectUpdate'>
            /// The updated values for the project.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateProjectAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, ProjectUpdate projectUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateProjectWithHttpMessagesAsync(id, projectUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of supported locales.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSupportedProjectLocales(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.GetSupportedProjectLocalesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of supported locales.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSupportedProjectLocalesAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupportedProjectLocalesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of projects for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of models that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of models that will be included after skipping.
            /// </param>
            public static object GetProjects(this ISpeechServicesAPIv30Beta1 operations, int? skip = default(int?), int? top = default(int?))
            {
                return operations.GetProjectsAsync(skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of projects for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of models that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of models that will be included after skipping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetProjectsAsync(this ISpeechServicesAPIv30Beta1 operations, int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProjectsWithHttpMessagesAsync(skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectDefinition'>
            /// The details of the project.
            /// </param>
            public static CreateProjectHeaders CreateProject(this ISpeechServicesAPIv30Beta1 operations, Project projectDefinition)
            {
                return operations.CreateProjectAsync(projectDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectDefinition'>
            /// The details of the project.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateProjectHeaders> CreateProjectAsync(this ISpeechServicesAPIv30Beta1 operations, Project projectDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateProjectWithHttpMessagesAsync(projectDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets the list of models for specified project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='skip'>
            /// Number of models that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of models that will be included after skipping.
            /// </param>
            public static object GetModelsForProject(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? skip = default(int?), int? top = default(int?))
            {
                return operations.GetModelsForProjectAsync(id, skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of models for specified project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='skip'>
            /// Number of models that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of models that will be included after skipping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object>GetModelsForProjectAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetModelsForProjectWithHttpMessagesAsync(id, skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of datasets for specified project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='skip'>
            /// Number of datasets that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of datasets that will be included after skipping.
            /// </param>
            public static object GetDatasetsForProject(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? skip = default(int?), int? top = default(int?))
            {
                return operations.GetDatasetsForProjectAsync(id, skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of datasets for specified project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='skip'>
            /// Number of datasets that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of datasets that will be included after skipping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDatasetsForProjectAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetsForProjectWithHttpMessagesAsync(id, skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of endpoints for specified project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='skip'>
            /// Number of endpoints that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of endpoints that will be included after skipping.
            /// </param>
            public static object GetEndpointsForProject(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? skip = default(int?), int? top = default(int?))
            {
                return operations.GetEndpointsForProjectAsync(id, skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of endpoints for specified project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='skip'>
            /// Number of endpoints that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of endpoints that will be included after skipping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetEndpointsForProjectAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEndpointsForProjectWithHttpMessagesAsync(id, skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of accuracy tests for specified project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='skip'>
            /// Number of tests that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of tests that will be included after skipping.
            /// </param>
            public static object GetAccuracyTestsForProject(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? skip = default(int?), int? top = default(int?))
            {
                return operations.GetAccuracyTestsForProjectAsync(id, skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of accuracy tests for specified project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='skip'>
            /// Number of tests that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of tests that will be included after skipping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAccuracyTestsForProjectAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAccuracyTestsForProjectWithHttpMessagesAsync(id, skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of transcriptions for specified project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='skip'>
            /// Number of transcriptions that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of transcriptions that will be included after skipping.
            /// </param>
            public static object GetTranscriptionsForProject(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? skip = default(int?), int? top = default(int?))
            {
                return operations.GetTranscriptionsForProjectAsync(id, skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of transcriptions for specified project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='skip'>
            /// Number of transcriptions that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of transcriptions that will be included after skipping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTranscriptionsForProjectAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTranscriptionsForProjectWithHttpMessagesAsync(id, skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the transcription identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the transcription.
            /// </param>
            public static object GetTranscription(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetTranscriptionAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the transcription identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the transcription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTranscriptionAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTranscriptionWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified transcription task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the transcription.
            /// </param>
            public static object DeleteTranscription(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.DeleteTranscriptionAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified transcription task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the transcription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteTranscriptionAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTranscriptionWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the mutable details of the transcription identified by its ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the transcription.
            /// </param>
            /// <param name='transcriptionUpdate'>
            /// The updated values for the transcription.
            /// </param>
            public static object UpdateTranscription(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, TranscriptionUpdate transcriptionUpdate)
            {
                return operations.UpdateTranscriptionAsync(id, transcriptionUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the mutable details of the transcription identified by its ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the transcription.
            /// </param>
            /// <param name='transcriptionUpdate'>
            /// The updated values for the transcription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateTranscriptionAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, TranscriptionUpdate transcriptionUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTranscriptionWithHttpMessagesAsync(id, transcriptionUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of supported locales for offline transcriptions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSupportedLocalesForTranscriptions(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.GetSupportedLocalesForTranscriptionsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of supported locales for offline transcriptions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSupportedLocalesForTranscriptionsAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupportedLocalesForTranscriptionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of transcriptions for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of transcriptions that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of transcriptions that will be included after skipping.
            /// </param>
            public static object GetTranscriptions(this ISpeechServicesAPIv30Beta1 operations, int? skip = default(int?), int? top = default(int?))
            {
                return operations.GetTranscriptionsAsync(skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of transcriptions for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of transcriptions that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of transcriptions that will be included after skipping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTranscriptionsAsync(this ISpeechServicesAPIv30Beta1 operations, int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTranscriptionsWithHttpMessagesAsync(skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new transcription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transcription'>
            /// The details of the new transcription.
            /// </param>
            public static object CreateTranscription(this ISpeechServicesAPIv30Beta1 operations, Transcription transcription)
            {
                return operations.CreateTranscriptionAsync(transcription).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new transcription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transcription'>
            /// The details of the new transcription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateTranscriptionAsync(this ISpeechServicesAPIv30Beta1 operations, Transcription transcription, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTranscriptionWithHttpMessagesAsync(transcription, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets one specific file (identified with fileId) from a transcription
            /// (identified with id).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the transcription.
            /// </param>
            /// <param name='fileId'>
            /// The identifier of the file.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            public static object GetTranscriptionFile(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, System.Guid fileId, int? sasValidity = default(int?))
            {
                return operations.GetTranscriptionFileAsync(id, fileId, sasValidity).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets one specific file (identified with fileId) from a transcription
            /// (identified with id).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the transcription.
            /// </param>
            /// <param name='fileId'>
            /// The identifier of the file.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object>GetTranscriptionFileAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, System.Guid fileId, int? sasValidity = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTranscriptionFileWithHttpMessagesAsync(id, fileId, sasValidity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the files of the transcription identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the transcription.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            /// <param name='skip'>
            /// Number of files that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of files that will be included after skipping.
            /// </param>
            public static object GetTranscriptionFiles(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? sasValidity = default(int?), int? skip = default(int?), int? top = default(int?))
            {
                return operations.GetTranscriptionFilesAsync(id, sasValidity, skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the files of the transcription identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the transcription.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            /// <param name='skip'>
            /// Number of files that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of files that will be included after skipping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTranscriptionFilesAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? sasValidity = default(int?), int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTranscriptionFilesWithHttpMessagesAsync(id, sasValidity, skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the web hook registration identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the web hook.
            /// </param>
            public static object GetHook(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetHookAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the web hook registration identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the web hook.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetHookAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHookWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the web hook registration identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the web hook.
            /// </param>
            public static DeleteHookHeaders DeleteHook(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.DeleteHookAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the web hook registration identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the web hook.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteHookHeaders> DeleteHookAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteHookWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Updates the web hook registration identified by the given ID.
            /// </summary>
            /// <remarks>
            /// If the property secret in the configuration is omitted or contains an empty
            /// string, future callbacks won't contain X-MicrosoftSpeechServices-Signature
            /// headers. If the property contains a non-empty string, it will be used to
            /// create a SHA256 hash of the payload with the secret as HMAC key. This hash
            /// will be set as X-MicrosoftSpeechServices-Signature header when calling back
            /// into the registered URL.
            ///
            /// If the property active is false, no more callbacks to the web hook are
            /// made, but the registration remains. Sending a request with the property
            /// being true, the service will resume calling back into the registered URL.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the web hook.
            /// </param>
            /// <param name='webHookUpdate'>
            /// The updated values for the web hook.
            /// </param>
            public static object UpdateHook(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, WebHookUpdate webHookUpdate)
            {
                return operations.UpdateHookAsync(id, webHookUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the web hook registration identified by the given ID.
            /// </summary>
            /// <remarks>
            /// If the property secret in the configuration is omitted or contains an empty
            /// string, future callbacks won't contain X-MicrosoftSpeechServices-Signature
            /// headers. If the property contains a non-empty string, it will be used to
            /// create a SHA256 hash of the payload with the secret as HMAC key. This hash
            /// will be set as X-MicrosoftSpeechServices-Signature header when calling back
            /// into the registered URL.
            ///
            /// If the property active is false, no more callbacks to the web hook are
            /// made, but the registration remains. Sending a request with the property
            /// being true, the service will resume calling back into the registered URL.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the web hook.
            /// </param>
            /// <param name='webHookUpdate'>
            /// The updated values for the web hook.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateHookAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, WebHookUpdate webHookUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateHookWithHttpMessagesAsync(id, webHookUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of web hook registrations for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of hooks that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of hooks that will be included after skipping.
            /// </param>
            public static object GetHooks(this ISpeechServicesAPIv30Beta1 operations, int? skip = default(int?), int? top = default(int?))
            {
                return operations.GetHooksAsync(skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of web hook registrations for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of hooks that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of hooks that will be included after skipping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetHooksAsync(this ISpeechServicesAPIv30Beta1 operations, int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHooksWithHttpMessagesAsync(skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new web hook registration.
            /// </summary>
            /// <remarks>
            /// If the property secret in the configuration is present and contains a
            /// non-empty string, it will be used to create a SHA256 hash of the payload
            /// with
            /// the secret as HMAC key. This hash will be set as
            /// X-MicrosoftSpeechServices-Signature header when calling back into the
            /// registered URL.
            ///
            /// When calling back into the registered URL, the request will contain a
            /// X-MicrosoftSpeechServices-Event header containing one of the registered
            /// event
            /// types. There will be one request per registered event type.
            ///
            /// After successfully registering the web hook, a request with the event type
            /// ping will be made. The payload is of the same type as the response type
            /// of this request.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='webHookDefinition'>
            /// The details of the new web hook.
            /// </param>
            public static CreateHookHeaders CreateHook(this ISpeechServicesAPIv30Beta1 operations, WebHook webHookDefinition)
            {
                return operations.CreateHookAsync(webHookDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new web hook registration.
            /// </summary>
            /// <remarks>
            /// If the property secret in the configuration is present and contains a
            /// non-empty string, it will be used to create a SHA256 hash of the payload
            /// with
            /// the secret as HMAC key. This hash will be set as
            /// X-MicrosoftSpeechServices-Signature header when calling back into the
            /// registered URL.
            ///
            /// When calling back into the registered URL, the request will contain a
            /// X-MicrosoftSpeechServices-Event header containing one of the registered
            /// event
            /// types. There will be one request per registered event type.
            ///
            /// After successfully registering the web hook, a request with the event type
            /// ping will be made. The payload is of the same type as the response type
            /// of this request.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='webHookDefinition'>
            /// The details of the new web hook.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateHookHeaders> CreateHookAsync(this ISpeechServicesAPIv30Beta1 operations, WebHook webHookDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateHookWithHttpMessagesAsync(webHookDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Sends a ping event to the registered URL.
            /// </summary>
            /// <remarks>
            /// The request body of the POST request sent to the registered web hook URL is
            /// of the same shape as in the GET request for a specific hook.
            /// The Swagger Schema ID of the model is WebHookV3.
            ///
            /// The request will contain a X-MicrosoftSpeechServices-Event header with the
            /// value ping. If the web hook was registered with
            /// a secret it will contain a X-MicrosoftSpeechServices-Signature header with
            /// an SHA256 hash of the payload with
            /// the secret as HMAC key. The hash is base64 encoded.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the web hook to ping.
            /// </param>
            public static PingHookHeaders PingHook(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.PingHookAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a ping event to the registered URL.
            /// </summary>
            /// <remarks>
            /// The request body of the POST request sent to the registered web hook URL is
            /// of the same shape as in the GET request for a specific hook.
            /// The Swagger Schema ID of the model is WebHookV3.
            ///
            /// The request will contain a X-MicrosoftSpeechServices-Event header with the
            /// value ping. If the web hook was registered with
            /// a secret it will contain a X-MicrosoftSpeechServices-Signature header with
            /// an SHA256 hash of the payload with
            /// the secret as HMAC key. The hash is base64 encoded.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the web hook to ping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PingHookHeaders> PingHookAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PingHookWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Sends a request for each registered event type to the registered URL.
            /// </summary>
            /// <remarks>
            /// The payload will be generated from the last entity that would have invoked
            /// the web hook. If no entity is present for none of the registered event
            /// types,
            /// the POST will respond with 204. If a test request can be made, it will
            /// respond with 200.
            /// The request will contain a X-MicrosoftSpeechServices-Event header with the
            /// respective registered event type.
            /// If the web hook was registered with a secret it will contain a
            /// X-MicrosoftSpeechServices-Signature header with an SHA256 hash of the
            /// payload with
            /// the secret as HMAC key. The hash is base64 encoded.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the web hook to ping.
            /// </param>
            public static TestHookHeaders TestHook(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.TestHookAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a request for each registered event type to the registered URL.
            /// </summary>
            /// <remarks>
            /// The payload will be generated from the last entity that would have invoked
            /// the web hook. If no entity is present for none of the registered event
            /// types,
            /// the POST will respond with 204. If a test request can be made, it will
            /// respond with 200.
            /// The request will contain a X-MicrosoftSpeechServices-Event header with the
            /// respective registered event type.
            /// If the web hook was registered with a secret it will contain a
            /// X-MicrosoftSpeechServices-Signature header with an SHA256 hash of the
            /// payload with
            /// the secret as HMAC key. The hash is base64 encoded.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the web hook to ping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestHookHeaders> TestHookAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TestHookWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='timeoutMinutes'>
            /// </param>
            public static object GetTimeoutExportAudioTaskIds(this ISpeechServicesAPIv30Beta1 operations, int timeoutMinutes)
            {
                return operations.GetTimeoutExportAudioTaskIdsAsync(timeoutMinutes).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='timeoutMinutes'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTimeoutExportAudioTaskIdsAsync(this ISpeechServicesAPIv30Beta1 operations, int timeoutMinutes, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTimeoutExportAudioTaskIdsWithHttpMessagesAsync(timeoutMinutes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of projects for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetVoiceProjects(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.GetVoiceProjectsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of projects for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceProjectsAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceProjectsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectDefinition'>
            /// The details of the project.
            /// </param>
            public static object CreateVoiceProject(this ISpeechServicesAPIv30Beta1 operations, ProjectDefinition projectDefinition)
            {
                return operations.CreateVoiceProjectAsync(projectDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectDefinition'>
            /// The details of the project.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateVoiceProjectAsync(this ISpeechServicesAPIv30Beta1 operations, ProjectDefinition projectDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateVoiceProjectWithHttpMessagesAsync(projectDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the project identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            public static object GetVoiceProject(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetVoiceProjectAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the project identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceProjectAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceProjectWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the project identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            public static DeleteVoiceProjectHeaders DeleteVoiceProject(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.DeleteVoiceProjectAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the project identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteVoiceProjectHeaders> DeleteVoiceProjectAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteVoiceProjectWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Updates the project identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='projectUpdate'>
            /// The updated values for the project.
            /// </param>
            public static object UpdateVoiceProject(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, ProjectUpdate projectUpdate)
            {
                return operations.UpdateVoiceProjectAsync(id, projectUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the project identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='projectUpdate'>
            /// The updated values for the project.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateVoiceProjectAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, ProjectUpdate projectUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVoiceProjectWithHttpMessagesAsync(id, projectUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of supported locales.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSupportedVoiceProjectLocales(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.GetSupportedVoiceProjectLocalesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of supported locales.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSupportedVoiceProjectLocalesAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupportedVoiceProjectLocalesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of projects for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetKeywordProjects(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.GetKeywordProjectsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of projects for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetKeywordProjectsAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeywordProjectsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectDefinition'>
            /// The details of the project.
            /// </param>
            public static object CreateKeywordProject(this ISpeechServicesAPIv30Beta1 operations, ProjectDefinition projectDefinition)
            {
                return operations.CreateKeywordProjectAsync(projectDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectDefinition'>
            /// The details of the project.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateKeywordProjectAsync(this ISpeechServicesAPIv30Beta1 operations, ProjectDefinition projectDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateKeywordProjectWithHttpMessagesAsync(projectDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the project identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            public static object GetKeywordProject(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetKeywordProjectAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the project identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetKeywordProjectAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeywordProjectWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the project identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            public static DeleteKeywordProjectHeaders DeleteKeywordProject(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.DeleteKeywordProjectAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the project identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteKeywordProjectHeaders> DeleteKeywordProjectAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteKeywordProjectWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Updates the project identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='projectUpdate'>
            /// The updated values for the project.
            /// </param>
            public static object UpdateKeywordProject(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, ProjectUpdate projectUpdate)
            {
                return operations.UpdateKeywordProjectAsync(id, projectUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the project identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='projectUpdate'>
            /// The updated values for the project.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateKeywordProjectAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, ProjectUpdate projectUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateKeywordProjectWithHttpMessagesAsync(id, projectUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of supported locales.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSupportedKeywordProjectLocales(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.GetSupportedKeywordProjectLocalesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of supported locales.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSupportedKeywordProjectLocalesAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupportedKeywordProjectLocalesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Searches speech logs by parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchParameters'>
            /// </param>
            public static object SearchLogs(this ISpeechServicesAPIv30Beta1 operations, AnalyticsSearchQuery searchParameters)
            {
                return operations.SearchLogsAsync(searchParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Searches speech logs by parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchParameters'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SearchLogsAsync(this ISpeechServicesAPIv30Beta1 operations, AnalyticsSearchQuery searchParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchLogsWithHttpMessagesAsync(searchParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates summary of speech logs by parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='summaryParameters'>
            /// </param>
            public static object CreateLogsSummary(this ISpeechServicesAPIv30Beta1 operations, AnalyticsSummaryParameters summaryParameters)
            {
                return operations.CreateLogsSummaryAsync(summaryParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates summary of speech logs by parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='summaryParameters'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateLogsSummaryAsync(this ISpeechServicesAPIv30Beta1 operations, AnalyticsSummaryParameters summaryParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateLogsSummaryWithHttpMessagesAsync(summaryParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the specified endpoint data export task for the authenticated user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the data export.
            /// </param>
            public static object GetEndpointDataExport(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetEndpointDataExportAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified endpoint data export task for the authenticated user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the data export.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetEndpointDataExportAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEndpointDataExportWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the endpoint data export task identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint data export.
            /// </param>
            public static DeleteEndpointDataExportHeaders DeleteEndpointDataExport(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.DeleteEndpointDataExportAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the endpoint data export task identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint data export.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteEndpointDataExportHeaders> DeleteEndpointDataExportAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteEndpointDataExportWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets the specified donation task for the authenticated user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the donation.
            /// </param>
            public static object GetDataCollectionDonation(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetDataCollectionDonationAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified donation task for the authenticated user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the donation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDataCollectionDonationAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataCollectionDonationWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the donation task identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the donation.
            /// </param>
            public static DeleteDataCollectionDonationHeaders DeleteDataCollectionDonation(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.DeleteDataCollectionDonationAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the donation task identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the donation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteDataCollectionDonationHeaders> DeleteDataCollectionDonationAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDataCollectionDonationWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update mutable details of a donation task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the donation.
            /// </param>
            /// <param name='donationUpdate'>
            /// The object containing the updated fields of the donation.
            /// </param>
            public static object UpdateDataCollectionDonation(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, DataCollectionDonationUpdate donationUpdate)
            {
                return operations.UpdateDataCollectionDonationAsync(id, donationUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update mutable details of a donation task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the donation.
            /// </param>
            /// <param name='donationUpdate'>
            /// The object containing the updated fields of the donation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateDataCollectionDonationAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, DataCollectionDonationUpdate donationUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDataCollectionDonationWithHttpMessagesAsync(id, donationUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of exports that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of exports that will be included after skipping.
            /// </param>
            public static object GetAllEndpointDataExports(this ISpeechServicesAPIv30Beta1 operations, int? skip = default(int?), int? top = default(int?))
            {
                return operations.GetAllEndpointDataExportsAsync(skip, top).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of exports that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of exports that will be included after skipping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllEndpointDataExportsAsync(this ISpeechServicesAPIv30Beta1 operations, int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllEndpointDataExportsWithHttpMessagesAsync(skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new endpoint data export task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointDataDefinition'>
            /// The details of the new endpoint data export.
            /// </param>
            public static object CreateEndpointDataExport(this ISpeechServicesAPIv30Beta1 operations, EndpointDataDefinition endpointDataDefinition)
            {
                return operations.CreateEndpointDataExportAsync(endpointDataDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new endpoint data export task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointDataDefinition'>
            /// The details of the new endpoint data export.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateEndpointDataExportAsync(this ISpeechServicesAPIv30Beta1 operations, EndpointDataDefinition endpointDataDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateEndpointDataExportWithHttpMessagesAsync(endpointDataDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of donation tasks for the authenticated user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of data donations that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of data donations that will be included after skipping.
            /// </param>
            public static object GetDataCollectionDonations(this ISpeechServicesAPIv30Beta1 operations, int? skip = default(int?), int? top = default(int?))
            {
                return operations.GetDataCollectionDonationsAsync(skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of donation tasks for the authenticated user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of data donations that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of data donations that will be included after skipping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDataCollectionDonationsAsync(this ISpeechServicesAPIv30Beta1 operations, int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataCollectionDonationsWithHttpMessagesAsync(skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new donation task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='donationDefinition'>
            /// The details of the new donation task.
            /// </param>
            public static object CreateDataCollectionDonation(this ISpeechServicesAPIv30Beta1 operations, DataCollectionDonationDefinition donationDefinition)
            {
                return operations.CreateDataCollectionDonationAsync(donationDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new donation task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='donationDefinition'>
            /// The details of the new donation task.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateDataCollectionDonationAsync(this ISpeechServicesAPIv30Beta1 operations, DataCollectionDonationDefinition donationDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDataCollectionDonationWithHttpMessagesAsync(donationDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of data collections for specified project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='skip'>
            /// Number of exports that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of exports that will be included after skipping.
            /// </param>
            public static object GetEndpointDataExportsForProject(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? skip = default(int?), int? top = default(int?))
            {
                return operations.GetEndpointDataExportsForProjectAsync(id, skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of data collections for specified project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='skip'>
            /// Number of exports that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of exports that will be included after skipping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetEndpointDataExportsForProjectAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEndpointDataExportsForProjectWithHttpMessagesAsync(id, skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of endpoint data export tasks of default model for the
            /// specified locale.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locale'>
            /// Locale of the default model.
            /// </param>
            /// <param name='skip'>
            /// Number of exports that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of exports that will be included after skipping.
            /// </param>
            public static object GetBaseModelDataExports(this ISpeechServicesAPIv30Beta1 operations, string locale, int? skip = default(int?), int? top = default(int?))
            {
                return operations.GetBaseModelDataExportsAsync(locale, skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of endpoint data export tasks of default model for the
            /// specified locale.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locale'>
            /// Locale of the default model.
            /// </param>
            /// <param name='skip'>
            /// Number of exports that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of exports that will be included after skipping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetBaseModelDataExportsAsync(this ISpeechServicesAPIv30Beta1 operations, string locale, int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBaseModelDataExportsWithHttpMessagesAsync(locale, skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the transcriptions and captured audio files associated with base
            /// model in given locale.
            /// </summary>
            /// <remarks>
            /// Deletion will happen in the background and can take up to a day.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locale'>
            /// The locale of the endpoint.
            /// </param>
            /// <param name='start'>
            /// Gets or sets start time of the logs to be deleted. Delete from beginning of
            /// logs when not set.
            /// Sample value: "2019-09-23T00:00:00Z".
            /// </param>
            /// <param name='end'>
            /// End time of the logs to be deleted. Delete to the end of logs when not set.
            /// Sample value: "2019-09-23T00:00:00Z".
            /// </param>
            public static DeleteDefaultBaseModelEndpointAudioLogHeaders DeleteDefaultBaseModelEndpointAudioLog(this ISpeechServicesAPIv30Beta1 operations, string locale, System.DateTime? start = default(System.DateTime?), System.DateTime? end = default(System.DateTime?))
            {
                return operations.DeleteDefaultBaseModelEndpointAudioLogAsync(locale, start, end).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the transcriptions and captured audio files associated with base
            /// model in given locale.
            /// </summary>
            /// <remarks>
            /// Deletion will happen in the background and can take up to a day.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locale'>
            /// The locale of the endpoint.
            /// </param>
            /// <param name='start'>
            /// Gets or sets start time of the logs to be deleted. Delete from beginning of
            /// logs when not set.
            /// Sample value: "2019-09-23T00:00:00Z".
            /// </param>
            /// <param name='end'>
            /// End time of the logs to be deleted. Delete to the end of logs when not set.
            /// Sample value: "2019-09-23T00:00:00Z".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteDefaultBaseModelEndpointAudioLogHeaders> DeleteDefaultBaseModelEndpointAudioLogAsync(this ISpeechServicesAPIv30Beta1 operations, string locale, System.DateTime? start = default(System.DateTime?), System.DateTime? end = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDefaultBaseModelEndpointAudioLogWithHttpMessagesAsync(locale, start, end, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets the list of endpoint data export tasks for the authenticated user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='skip'>
            /// Number of exports that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of exports that will be included after skipping.
            /// </param>
            public static object GetEndpointDataExports(this ISpeechServicesAPIv30Beta1 operations, System.Guid endpointId, int? skip = default(int?), int? top = default(int?))
            {
                return operations.GetEndpointDataExportsAsync(endpointId, skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of endpoint data export tasks for the authenticated user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='skip'>
            /// Number of exports that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of exports that will be included after skipping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetEndpointDataExportsAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid endpointId, int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEndpointDataExportsWithHttpMessagesAsync(endpointId, skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the transcriptions and captured audio files associated with the
            /// custom endpoint identified by the given ID from start time to end time.
            /// </summary>
            /// <remarks>
            /// Deletion will happen in the background and can take up to a day.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='start'>
            /// Gets or sets start time of the logs to be deleted. Delete from beginning of
            /// logs when not set.
            /// Sample value: "2019-09-23T00:00:00Z".
            /// </param>
            /// <param name='end'>
            /// End time of the logs to be deleted. Delete to the end of logs when not set.
            /// Sample value: "2019-09-23T00:00:00Z".
            /// </param>
            public static DeleteEndpointAudioLogHeaders DeleteEndpointAudioLog(this ISpeechServicesAPIv30Beta1 operations, System.Guid endpointId, System.DateTime? start = default(System.DateTime?), System.DateTime? end = default(System.DateTime?))
            {
                return operations.DeleteEndpointAudioLogAsync(endpointId, start, end).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the transcriptions and captured audio files associated with the
            /// custom endpoint identified by the given ID from start time to end time.
            /// </summary>
            /// <remarks>
            /// Deletion will happen in the background and can take up to a day.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='start'>
            /// Gets or sets start time of the logs to be deleted. Delete from beginning of
            /// logs when not set.
            /// Sample value: "2019-09-23T00:00:00Z".
            /// </param>
            /// <param name='end'>
            /// End time of the logs to be deleted. Delete to the end of logs when not set.
            /// Sample value: "2019-09-23T00:00:00Z".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteEndpointAudioLogHeaders> DeleteEndpointAudioLogAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid endpointId, System.DateTime? start = default(System.DateTime?), System.DateTime? end = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteEndpointAudioLogWithHttpMessagesAsync(endpointId, start, end, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets one specific file (identified with fileId) from an data collection
            /// (identified with id).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the accuracy test.
            /// </param>
            /// <param name='fileId'>
            /// The identifier of the file.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            public static object GetDataCollectionFile(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, System.Guid fileId, int? sasValidity = default(int?))
            {
                return operations.GetDataCollectionFileAsync(id, fileId, sasValidity).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets one specific file (identified with fileId) from an data collection
            /// (identified with id).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the accuracy test.
            /// </param>
            /// <param name='fileId'>
            /// The identifier of the file.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object>GetDataCollectionFileAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, System.Guid fileId, int? sasValidity = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataCollectionFileWithHttpMessagesAsync(id, fileId, sasValidity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the files of the data collection identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the data collection.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            /// <param name='skip'>
            /// Number of files that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of files that will be included after skipping.
            /// </param>
            public static object GetDataCollectionFiles(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? sasValidity = default(int?), int? skip = default(int?), int? top = default(int?))
            {
                return operations.GetDataCollectionFilesAsync(id, sasValidity, skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the files of the data collection identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the data collection.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            /// <param name='skip'>
            /// Number of files that will be skipped.
            /// </param>
            /// <param name='top'>
            /// Number of files that will be included after skipping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDataCollectionFilesAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? sasValidity = default(int?), int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataCollectionFilesWithHttpMessagesAsync(id, sasValidity, skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Download ssml tuning metadata.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object QueryTuneMetadata(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.QueryTuneMetadataAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Download ssml tuning metadata.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> QueryTuneMetadataAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryTuneMetadataWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query exported audio files.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// Possible values include: 'None', 'VipUsers', 'InternalPartnerUsers'
            /// </param>
            public static object IsCurrentSubscriptionInGroup(this ISpeechServicesAPIv30Beta1 operations, string group)
            {
                return operations.IsCurrentSubscriptionInGroupAsync(group).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query exported audio files.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// Possible values include: 'None', 'VipUsers', 'InternalPartnerUsers'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsCurrentSubscriptionInGroupAsync(this ISpeechServicesAPIv30Beta1 operations, string group, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsCurrentSubscriptionInGroupWithHttpMessagesAsync(group, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Tuning feature: Change speaking rate for selected text.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tuneDefinition'>
            /// </param>
            public static object Tune(this ISpeechServicesAPIv30Beta1 operations, TuneDefinitionV3 tuneDefinition)
            {
                return operations.TuneAsync(tuneDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Tuning feature: Change speaking rate for selected text.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tuneDefinition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> TuneAsync(this ISpeechServicesAPIv30Beta1 operations, TuneDefinitionV3 tuneDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TuneWithHttpMessagesAsync(tuneDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Speak API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='speakDefinition'>
            /// </param>
            public static object Speak(this ISpeechServicesAPIv30Beta1 operations, SpeakDefinitionV3 speakDefinition)
            {
                return operations.SpeakAsync(speakDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Speak API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='speakDefinition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SpeakAsync(this ISpeechServicesAPIv30Beta1 operations, SpeakDefinitionV3 speakDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SpeakWithHttpMessagesAsync(speakDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets voices info belong to current sub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queryConditions'>
            /// </param>
            public static object QueryVoices(this ISpeechServicesAPIv30Beta1 operations, QueryVoiceDefinition queryConditions)
            {
                return operations.QueryVoicesAsync(queryConditions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets voices info belong to current sub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queryConditions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> QueryVoicesAsync(this ISpeechServicesAPIv30Beta1 operations, QueryVoiceDefinition queryConditions, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryVoicesWithHttpMessagesAsync(queryConditions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Tuning feature: Change speaking rate for selected text.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tuneDefinitions'>
            /// </param>
            public static object MultiTune(this ISpeechServicesAPIv30Beta1 operations, IList<TuneDefinitionV3> tuneDefinitions)
            {
                return operations.MultiTuneAsync(tuneDefinitions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Tuning feature: Change speaking rate for selected text.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tuneDefinitions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> MultiTuneAsync(this ISpeechServicesAPIv30Beta1 operations, IList<TuneDefinitionV3> tuneDefinitions, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MultiTuneWithHttpMessagesAsync(tuneDefinitions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Split ssml.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='splitSsmlsDefinition'>
            /// </param>
            public static object SplitSsmls(this ISpeechServicesAPIv30Beta1 operations, SplitSsmlDefinitionV3 splitSsmlsDefinition)
            {
                return operations.SplitSsmlsAsync(splitSsmlsDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Split ssml.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='splitSsmlsDefinition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SplitSsmlsAsync(this ISpeechServicesAPIv30Beta1 operations, SplitSsmlDefinitionV3 splitSsmlsDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SplitSsmlsWithHttpMessagesAsync(splitSsmlsDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Edit task file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='editFileDefinition'>
            /// </param>
            public static EditSsmlFileHeaders EditSsmlFile(this ISpeechServicesAPIv30Beta1 operations, EditVcgFileDefinitionV3 editFileDefinition)
            {
                return operations.EditSsmlFileAsync(editFileDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Edit task file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='editFileDefinition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EditSsmlFileHeaders> EditSsmlFileAsync(this ISpeechServicesAPIv30Beta1 operations, EditVcgFileDefinitionV3 editFileDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditSsmlFileWithHttpMessagesAsync(editFileDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Query word metadata API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='speakMetadataDefinition'>
            /// </param>
            public static object SpeakMetadata(this ISpeechServicesAPIv30Beta1 operations, SpeakMetadataDefinitionV3 speakMetadataDefinition)
            {
                return operations.SpeakMetadataAsync(speakMetadataDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query word metadata API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='speakMetadataDefinition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SpeakMetadataAsync(this ISpeechServicesAPIv30Beta1 operations, SpeakMetadataDefinitionV3 speakMetadataDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SpeakMetadataWithHttpMessagesAsync(speakMetadataDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Edit ssml folder.
            /// Relased customers:
            /// 1. Cortana.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='editFolderDefinition'>
            /// </param>
            public static EditSsmlFolderHeaders EditSsmlFolder(this ISpeechServicesAPIv30Beta1 operations, EditVcgFolderDefinitionV3 editFolderDefinition)
            {
                return operations.EditSsmlFolderAsync(editFolderDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Edit ssml folder.
            /// Relased customers:
            /// 1. Cortana.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='editFolderDefinition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EditSsmlFolderHeaders> EditSsmlFolderAsync(this ISpeechServicesAPIv30Beta1 operations, EditVcgFolderDefinitionV3 editFolderDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditSsmlFolderWithHttpMessagesAsync(editFolderDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets tasks info belong to current sub.
            /// Relased customers:
            /// 1. Cortana.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queryDefinition'>
            /// </param>
            public static object QuerySsmlFiles(this ISpeechServicesAPIv30Beta1 operations, QuerySsmlFilesDefinitionV3 queryDefinition)
            {
                return operations.QuerySsmlFilesAsync(queryDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets tasks info belong to current sub.
            /// Relased customers:
            /// 1. Cortana.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queryDefinition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> QuerySsmlFilesAsync(this ISpeechServicesAPIv30Beta1 operations, QuerySsmlFilesDefinitionV3 queryDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QuerySsmlFilesWithHttpMessagesAsync(queryDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query exported audio files.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='definition'>
            /// </param>
            public static object QueryAudioFiles(this ISpeechServicesAPIv30Beta1 operations, QueryAudioFileDefinition definition)
            {
                return operations.QueryAudioFilesAsync(definition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query exported audio files.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='definition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> QueryAudioFilesAsync(this ISpeechServicesAPIv30Beta1 operations, QueryAudioFileDefinition definition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryAudioFilesWithHttpMessagesAsync(definition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Upload task files.
            /// Relased customers:
            /// 1. Cortana.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uploadFilesDefinition'>
            /// </param>
            public static object UploadSsmlFiles(this ISpeechServicesAPIv30Beta1 operations, UploadVcgFilesDefinitionV3 uploadFilesDefinition)
            {
                return operations.UploadSsmlFilesAsync(uploadFilesDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upload task files.
            /// Relased customers:
            /// 1. Cortana.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uploadFilesDefinition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UploadSsmlFilesAsync(this ISpeechServicesAPIv30Beta1 operations, UploadVcgFilesDefinitionV3 uploadFilesDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadSsmlFilesWithHttpMessagesAsync(uploadFilesDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new folder.
            /// Relased customers:
            /// 1. Cortana.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createFolderDefinition'>
            /// </param>
            public static CreateSsmlFolderHeaders CreateSsmlFolder(this ISpeechServicesAPIv30Beta1 operations, CreateSsmlFolderDefinition createFolderDefinition)
            {
                return operations.CreateSsmlFolderAsync(createFolderDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new folder.
            /// Relased customers:
            /// 1. Cortana.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createFolderDefinition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateSsmlFolderHeaders> CreateSsmlFolderAsync(this ISpeechServicesAPIv30Beta1 operations, CreateSsmlFolderDefinition createFolderDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSsmlFolderWithHttpMessagesAsync(createFolderDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Delete voice audio files.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='voiceAudioIds'>
            /// </param>
            public static DeleteVoiceAudioFilesHeaders DeleteVoiceAudioFiles(this ISpeechServicesAPIv30Beta1 operations, IList<System.Guid?> voiceAudioIds)
            {
                return operations.DeleteVoiceAudioFilesAsync(voiceAudioIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete voice audio files.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='voiceAudioIds'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteVoiceAudioFilesHeaders> DeleteVoiceAudioFilesAsync(this ISpeechServicesAPIv30Beta1 operations, IList<System.Guid?> voiceAudioIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteVoiceAudioFilesWithHttpMessagesAsync(voiceAudioIds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Export ssml audio.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='exportDefinition'>
            /// </param>
            public static object ExportAudioFiles(this ISpeechServicesAPIv30Beta1 operations, ExportAudioFilesDefinition exportDefinition)
            {
                return operations.ExportAudioFilesAsync(exportDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Export ssml audio.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='exportDefinition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ExportAudioFilesAsync(this ISpeechServicesAPIv30Beta1 operations, ExportAudioFilesDefinition exportDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExportAudioFilesWithHttpMessagesAsync(exportDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query langauge data.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='definition'>
            /// Request definition.
            /// </param>
            public static LanguageMetadataHeaders LanguageMetadata(this ISpeechServicesAPIv30Beta1 operations, LanguageDataDefinitionV3 definition)
            {
                return operations.LanguageMetadataAsync(definition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query langauge data.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='definition'>
            /// Request definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LanguageMetadataHeaders> LanguageMetadataAsync(this ISpeechServicesAPIv30Beta1 operations, LanguageDataDefinitionV3 definition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LanguageMetadataWithHttpMessagesAsync(definition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Delete task recursively.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskIds'>
            /// </param>
            public static DeleteSsmlFolderOrFilesHeaders DeleteSsmlFolderOrFiles(this ISpeechServicesAPIv30Beta1 operations, IList<System.Guid?> taskIds)
            {
                return operations.DeleteSsmlFolderOrFilesAsync(taskIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete task recursively.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskIds'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteSsmlFolderOrFilesHeaders> DeleteSsmlFolderOrFilesAsync(this ISpeechServicesAPIv30Beta1 operations, IList<System.Guid?> taskIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSsmlFolderOrFilesWithHttpMessagesAsync(taskIds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Download tuning files.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='downloadDefinition'>
            /// </param>
            public static object DownloadTuneSsmlAsZip(this ISpeechServicesAPIv30Beta1 operations, DownloadVcgTuneDefinitionV3 downloadDefinition)
            {
                return operations.DownloadTuneSsmlAsZipAsync(downloadDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Download tuning files.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='downloadDefinition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DownloadTuneSsmlAsZipAsync(this ISpeechServicesAPIv30Beta1 operations, DownloadVcgTuneDefinitionV3 downloadDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DownloadTuneSsmlAsZipWithHttpMessagesAsync(downloadDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all voice datasets.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetVoiceDatasets(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.GetVoiceDatasetsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all voice datasets.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceDatasetsAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceDatasetsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Uploads and creates a new dataset by getting the data from specified URLs.
            /// </summary>
            /// <remarks>
            /// LongAudio and AudioOnly dataset will leverage the batch transcription
            /// feature of speech-to-text.
            /// A standard subscription (S0) key is required if VoiceDatasetType is
            /// LongAudio or AudioOnly.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataset'>
            /// Definition for the new dataset.
            /// </param>
            public static CreateVoiceDatasetHeaders CreateVoiceDataset(this ISpeechServicesAPIv30Beta1 operations, VoiceDatasetDefinition dataset)
            {
                return operations.CreateVoiceDatasetAsync(dataset).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads and creates a new dataset by getting the data from specified URLs.
            /// </summary>
            /// <remarks>
            /// LongAudio and AudioOnly dataset will leverage the batch transcription
            /// feature of speech-to-text.
            /// A standard subscription (S0) key is required if VoiceDatasetType is
            /// LongAudio or AudioOnly.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataset'>
            /// Definition for the new dataset.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateVoiceDatasetHeaders> CreateVoiceDatasetAsync(this ISpeechServicesAPIv30Beta1 operations, VoiceDatasetDefinition dataset, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateVoiceDatasetWithHttpMessagesAsync(dataset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets details about the specified dataset import.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the dataset import.
            /// </param>
            public static object GetVoiceDataset(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetVoiceDatasetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets details about the specified dataset import.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the dataset import.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceDatasetAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceDatasetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the voice dataset with the given id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice dataset.
            /// </param>
            public static DeleteVoiceDatasetHeaders DeleteVoiceDataset(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.DeleteVoiceDatasetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the voice dataset with the given id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice dataset.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteVoiceDatasetHeaders> DeleteVoiceDatasetAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteVoiceDatasetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Updates the mutable details of the voice dataset identified by its ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice dataset.
            /// </param>
            /// <param name='datasetUpdate'>
            /// The updated values for the voice dataset.
            /// </param>
            public static object UpdateVoiceDataset(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, VoiceDatasetUpdate datasetUpdate)
            {
                return operations.UpdateVoiceDatasetAsync(id, datasetUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the mutable details of the voice dataset identified by its ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice dataset.
            /// </param>
            /// <param name='datasetUpdate'>
            /// The updated values for the voice dataset.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateVoiceDatasetAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, VoiceDatasetUpdate datasetUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVoiceDatasetWithHttpMessagesAsync(id, datasetUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of supported locales for custom voice data imports.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSupportedLocalesForVoiceDatasets(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.GetSupportedLocalesForVoiceDatasetsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of supported locales for custom voice data imports.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSupportedLocalesForVoiceDatasetsAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupportedLocalesForVoiceDatasetsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the list of datasets for specified project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            public static object GetVoiceDatasetsForProject(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetVoiceDatasetsForProjectAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of datasets for specified project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceDatasetsForProjectAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceDatasetsForProjectWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get long audio data / audio only data import supported locales.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSupportedLocalesForVoiceLongAudioDatasets(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.GetSupportedLocalesForVoiceLongAudioDatasetsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get long audio data / audio only data import supported locales.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSupportedLocalesForVoiceLongAudioDatasetsAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupportedLocalesForVoiceLongAudioDatasetsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the files of the dataset identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the dataset.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            public static object GetVoiceDatasetFiles(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? sasValidity = default(int?))
            {
                return operations.GetVoiceDatasetFilesAsync(id, sasValidity).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the files of the dataset identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the dataset.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceDatasetFilesAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? sasValidity = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceDatasetFilesWithHttpMessagesAsync(id, sasValidity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Uploads data and creates a new voice data object.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The optional string representation of a project ID. If set, the dataset
            /// will be associated with that project.
            /// </param>
            /// <param name='name'>
            /// The name of this data import (always add this string for any import).
            /// </param>
            /// <param name='description'>
            /// Optional description of this data import.
            /// </param>
            /// <param name='locale'>
            /// The locale of this data import (always add this string for any import).
            /// </param>
            /// <param name='dataImportKind'>
            /// The kind of the data import (always add this string for any import).
            /// Possible values include: 'None', 'Language', 'Acoustic', 'Pronunciation',
            /// 'CustomVoice', 'AudioFiles', 'KeywordAudioTranscript'
            /// </param>
            /// <param name='properties'>
            /// Optional properties of this data import (json serialized object with
            /// key/values, where all values must be strings)
            /// </param>
            /// <param name='audiodata'>
            /// A zip file containing the audio data.
            /// </param>
            /// <param name='transcriptions'>
            /// The transcriptions text file of the audio data.
            /// </param>
            public static UploadVoiceDatasetHeaders UploadVoiceDataset(this ISpeechServicesAPIv30Beta1 operations, string projectId = default(string), string name = default(string), string description = default(string), string locale = default(string), string dataImportKind = default(string), string properties = default(string), Stream audiodata = default(Stream), Stream transcriptions = default(Stream))
            {
                return operations.UploadVoiceDatasetAsync(projectId, name, description, locale, dataImportKind, properties, audiodata, transcriptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads data and creates a new voice data object.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The optional string representation of a project ID. If set, the dataset
            /// will be associated with that project.
            /// </param>
            /// <param name='name'>
            /// The name of this data import (always add this string for any import).
            /// </param>
            /// <param name='description'>
            /// Optional description of this data import.
            /// </param>
            /// <param name='locale'>
            /// The locale of this data import (always add this string for any import).
            /// </param>
            /// <param name='dataImportKind'>
            /// The kind of the data import (always add this string for any import).
            /// Possible values include: 'None', 'Language', 'Acoustic', 'Pronunciation',
            /// 'CustomVoice', 'AudioFiles', 'KeywordAudioTranscript'
            /// </param>
            /// <param name='properties'>
            /// Optional properties of this data import (json serialized object with
            /// key/values, where all values must be strings)
            /// </param>
            /// <param name='audiodata'>
            /// A zip file containing the audio data.
            /// </param>
            /// <param name='transcriptions'>
            /// The transcriptions text file of the audio data.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UploadVoiceDatasetHeaders> UploadVoiceDatasetAsync(this ISpeechServicesAPIv30Beta1 operations, string projectId = default(string), string name = default(string), string description = default(string), string locale = default(string), string dataImportKind = default(string), string properties = default(string), Stream audiodata = default(Stream), Stream transcriptions = default(Stream), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadVoiceDatasetWithHttpMessagesAsync(projectId, name, description, locale, dataImportKind, properties, audiodata, transcriptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Upload voice dataset only with audio.
            /// This API is in currently in preview. It only accept subscription key
            /// authentication.
            /// Access token authentication is not supported and will get a bad request
            /// error.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The optional string representation of a project ID. If set, the dataset
            /// will be associated with that project.
            /// </param>
            /// <param name='name'>
            /// The name of this data import (always add this string for any import).
            /// </param>
            /// <param name='description'>
            /// Optional description of this data import.
            /// </param>
            /// <param name='locale'>
            /// The locale of this data import (always add this string for any import).
            /// </param>
            /// <param name='dataImportKind'>
            /// The kind of the data import (always add this string for any import).
            /// Possible values include: 'None', 'Language', 'Acoustic', 'Pronunciation',
            /// 'CustomVoice', 'AudioFiles', 'KeywordAudioTranscript'
            /// </param>
            /// <param name='properties'>
            /// Optional properties of this data import (json serialized object with
            /// key/values, where all values must be strings)
            /// </param>
            /// <param name='audiodata'>
            /// A zip of audio files (.wav or .mp3) without transcript. A transcription for
            /// each spoken utterance will be automatically generated.
            /// </param>
            public static UploadVoiceAudioOnlyDatasetHeaders UploadVoiceAudioOnlyDataset(this ISpeechServicesAPIv30Beta1 operations, string projectId = default(string), string name = default(string), string description = default(string), string locale = default(string), string dataImportKind = default(string), string properties = default(string), Stream audiodata = default(Stream))
            {
                return operations.UploadVoiceAudioOnlyDatasetAsync(projectId, name, description, locale, dataImportKind, properties, audiodata).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upload voice dataset only with audio.
            /// This API is in currently in preview. It only accept subscription key
            /// authentication.
            /// Access token authentication is not supported and will get a bad request
            /// error.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The optional string representation of a project ID. If set, the dataset
            /// will be associated with that project.
            /// </param>
            /// <param name='name'>
            /// The name of this data import (always add this string for any import).
            /// </param>
            /// <param name='description'>
            /// Optional description of this data import.
            /// </param>
            /// <param name='locale'>
            /// The locale of this data import (always add this string for any import).
            /// </param>
            /// <param name='dataImportKind'>
            /// The kind of the data import (always add this string for any import).
            /// Possible values include: 'None', 'Language', 'Acoustic', 'Pronunciation',
            /// 'CustomVoice', 'AudioFiles', 'KeywordAudioTranscript'
            /// </param>
            /// <param name='properties'>
            /// Optional properties of this data import (json serialized object with
            /// key/values, where all values must be strings)
            /// </param>
            /// <param name='audiodata'>
            /// A zip of audio files (.wav or .mp3) without transcript. A transcription for
            /// each spoken utterance will be automatically generated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UploadVoiceAudioOnlyDatasetHeaders> UploadVoiceAudioOnlyDatasetAsync(this ISpeechServicesAPIv30Beta1 operations, string projectId = default(string), string name = default(string), string description = default(string), string locale = default(string), string dataImportKind = default(string), string properties = default(string), Stream audiodata = default(Stream), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadVoiceAudioOnlyDatasetWithHttpMessagesAsync(projectId, name, description, locale, dataImportKind, properties, audiodata, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Upload voice dataset with long audio and scripts.
            /// This API is in currently in preview. It only accept subscription key
            /// authentication.
            /// Access token authentication is not supported and will get a bad request
            /// error.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The optional string representation of a project ID. If set, the dataset
            /// will be associated with that project.
            /// </param>
            /// <param name='name'>
            /// The name of this data import (always add this string for any import).
            /// </param>
            /// <param name='description'>
            /// Optional description of this data import.
            /// </param>
            /// <param name='locale'>
            /// The locale of this data import (always add this string for any import).
            /// </param>
            /// <param name='dataImportKind'>
            /// The kind of the data import (always add this string for any import).
            /// Possible values include: 'None', 'Language', 'Acoustic', 'Pronunciation',
            /// 'CustomVoice', 'AudioFiles', 'KeywordAudioTranscript'
            /// </param>
            /// <param name='properties'>
            /// Optional properties of this data import (json serialized object with
            /// key/values, where all values must be strings)
            /// </param>
            /// <param name='audiodata'>
            /// A zip of long, unsegmented audio files. (.wav or .mp3) Audio file should
            /// have the same name with the paired transcript
            /// </param>
            /// <param name='transcriptions'>
            /// A zip of transcript text files. (.txt in UTF-8 encoding with a byte-order
            /// marker) Transcript file should have the same name with the paired audio
            /// file.
            /// </param>
            public static UploadVoiceLongAudioDatasetHeaders UploadVoiceLongAudioDataset(this ISpeechServicesAPIv30Beta1 operations, string projectId = default(string), string name = default(string), string description = default(string), string locale = default(string), string dataImportKind = default(string), string properties = default(string), Stream audiodata = default(Stream), Stream transcriptions = default(Stream))
            {
                return operations.UploadVoiceLongAudioDatasetAsync(projectId, name, description, locale, dataImportKind, properties, audiodata, transcriptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upload voice dataset with long audio and scripts.
            /// This API is in currently in preview. It only accept subscription key
            /// authentication.
            /// Access token authentication is not supported and will get a bad request
            /// error.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The optional string representation of a project ID. If set, the dataset
            /// will be associated with that project.
            /// </param>
            /// <param name='name'>
            /// The name of this data import (always add this string for any import).
            /// </param>
            /// <param name='description'>
            /// Optional description of this data import.
            /// </param>
            /// <param name='locale'>
            /// The locale of this data import (always add this string for any import).
            /// </param>
            /// <param name='dataImportKind'>
            /// The kind of the data import (always add this string for any import).
            /// Possible values include: 'None', 'Language', 'Acoustic', 'Pronunciation',
            /// 'CustomVoice', 'AudioFiles', 'KeywordAudioTranscript'
            /// </param>
            /// <param name='properties'>
            /// Optional properties of this data import (json serialized object with
            /// key/values, where all values must be strings)
            /// </param>
            /// <param name='audiodata'>
            /// A zip of long, unsegmented audio files. (.wav or .mp3) Audio file should
            /// have the same name with the paired transcript
            /// </param>
            /// <param name='transcriptions'>
            /// A zip of transcript text files. (.txt in UTF-8 encoding with a byte-order
            /// marker) Transcript file should have the same name with the paired audio
            /// file.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UploadVoiceLongAudioDatasetHeaders> UploadVoiceLongAudioDatasetAsync(this ISpeechServicesAPIv30Beta1 operations, string projectId = default(string), string name = default(string), string description = default(string), string locale = default(string), string dataImportKind = default(string), string properties = default(string), Stream audiodata = default(Stream), Stream transcriptions = default(Stream), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadVoiceLongAudioDatasetWithHttpMessagesAsync(projectId, name, description, locale, dataImportKind, properties, audiodata, transcriptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets a list of voice endpoint details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetVoiceDeployments(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.GetVoiceDeploymentsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of voice endpoint details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceDeploymentsAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceDeploymentsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new voice endpoint object.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// </param>
            public static CreateVoiceDeploymentHeaders CreateVoiceDeployment(this ISpeechServicesAPIv30Beta1 operations, VoiceEndpointDefinitionV3 endpoint)
            {
                return operations.CreateVoiceDeploymentAsync(endpoint).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new voice endpoint object.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateVoiceDeploymentHeaders> CreateVoiceDeploymentAsync(this ISpeechServicesAPIv30Beta1 operations, VoiceEndpointDefinitionV3 endpoint, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateVoiceDeploymentWithHttpMessagesAsync(endpoint, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets the details of a custom voice endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetVoiceDeployment(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetVoiceDeploymentAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the details of a custom voice endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceDeploymentAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceDeploymentWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the specified voice endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of voice endpoint.
            /// </param>
            public static DeleteDeploymentHeaders DeleteDeployment(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.DeleteDeploymentAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the specified voice endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of voice endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteDeploymentHeaders> DeleteDeploymentAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDeploymentWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Updates the name and description of the endpoint identified by the given
            /// ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='endpointUpdate'>
            /// The updated values for the endpoint.
            /// </param>
            public static object UpdateVoiceEndpoint(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, VoiceEndpointMetadataUpdate endpointUpdate)
            {
                return operations.UpdateVoiceEndpointAsync(id, endpointUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the name and description of the endpoint identified by the given
            /// ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='endpointUpdate'>
            /// The updated values for the endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateVoiceEndpointAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, VoiceEndpointMetadataUpdate endpointUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVoiceEndpointWithHttpMessagesAsync(id, endpointUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of supported locales for custom voice endpoints.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSupportedLocalesForVoiceEndpoints(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.GetSupportedLocalesForVoiceEndpointsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of supported locales for custom voice endpoints.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSupportedLocalesForVoiceEndpointsAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupportedLocalesForVoiceEndpointsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of endpoints for specified project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            public static object GetVoiceEndpointsForProject(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetVoiceEndpointsForProjectAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of endpoints for specified project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceEndpointsForProjectAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceEndpointsForProjectWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns an endpoint manifest which can be used in an on-premise container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelId'>
            /// The ID of the model to generate an endpoint manifest for.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            public static CreateVoiceEndpointManifestHeaders CreateVoiceEndpointManifest(this ISpeechServicesAPIv30Beta1 operations, System.Guid modelId, int? sasValidity = default(int?))
            {
                return operations.CreateVoiceEndpointManifestAsync(modelId, sasValidity).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns an endpoint manifest which can be used in an on-premise container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelId'>
            /// The ID of the model to generate an endpoint manifest for.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateVoiceEndpointManifestHeaders> CreateVoiceEndpointManifestAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid modelId, int? sasValidity = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateVoiceEndpointManifestWithHttpMessagesAsync(modelId, sasValidity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets url of artifact.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// The identifier of the artifact.
            /// </param>
            public static object GetBlobEntities(this ISpeechServicesAPIv30Beta1 operations, IList<System.Guid?> ids)
            {
                return operations.GetBlobEntitiesAsync(ids).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets url of artifact.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// The identifier of the artifact.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetBlobEntitiesAsync(this ISpeechServicesAPIv30Beta1 operations, IList<System.Guid?> ids, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBlobEntitiesWithHttpMessagesAsync(ids, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified voice test.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// The identifiers of the voice general tasks.
            /// </param>
            public static DeleteVoiceGeneralTasksHeaders DeleteVoiceGeneralTasks(this ISpeechServicesAPIv30Beta1 operations, IList<System.Guid?> ids)
            {
                return operations.DeleteVoiceGeneralTasksAsync(ids).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified voice test.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// The identifiers of the voice general tasks.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteVoiceGeneralTasksHeaders> DeleteVoiceGeneralTasksAsync(this ISpeechServicesAPIv30Beta1 operations, IList<System.Guid?> ids, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteVoiceGeneralTasksWithHttpMessagesAsync(ids, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Query general tasks.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='definition'>
            /// </param>
            public static object QueryVcgExportAudioTasks(this ISpeechServicesAPIv30Beta1 operations, VcgExportAudioVoiceGeneralTaskQueryDefinition definition)
            {
                return operations.QueryVcgExportAudioTasksAsync(definition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query general tasks.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='definition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> QueryVcgExportAudioTasksAsync(this ISpeechServicesAPIv30Beta1 operations, VcgExportAudioVoiceGeneralTaskQueryDefinition definition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryVcgExportAudioTasksWithHttpMessagesAsync(definition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of voice model details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetVoiceModels(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.GetVoiceModelsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of voice model details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceModelsAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceModelsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new voice model object.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelDefinition'>
            /// </param>
            public static CreateVoiceModelHeaders CreateVoiceModel(this ISpeechServicesAPIv30Beta1 operations, VoiceModelDefinitionV3 modelDefinition)
            {
                return operations.CreateVoiceModelAsync(modelDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new voice model object.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelDefinition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateVoiceModelHeaders> CreateVoiceModelAsync(this ISpeechServicesAPIv30Beta1 operations, VoiceModelDefinitionV3 modelDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateVoiceModelWithHttpMessagesAsync(modelDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets specified voice model details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetVoiceModel(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetVoiceModelAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets specified voice model details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceModelAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceModelWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the voice model with the given id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice model.
            /// </param>
            public static DeleteVoiceModelHeaders DeleteVoiceModel(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.DeleteVoiceModelAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the voice model with the given id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteVoiceModelHeaders> DeleteVoiceModelAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteVoiceModelWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Updates the metadata of the voice model identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice model.
            /// </param>
            /// <param name='modelUpdate'>
            /// The updated values for the voice model.
            /// </param>
            public static object UpdateVoiceModel(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, VoiceModelUpdate modelUpdate)
            {
                return operations.UpdateVoiceModelAsync(id, modelUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the metadata of the voice model identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice model.
            /// </param>
            /// <param name='modelUpdate'>
            /// The updated values for the voice model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateVoiceModelAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, VoiceModelUpdate modelUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVoiceModelWithHttpMessagesAsync(id, modelUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of supported locales for custom voice models.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSupportedLocalesForVoiceModels(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.GetSupportedLocalesForVoiceModelsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of supported locales for custom voice models.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSupportedLocalesForVoiceModelsAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupportedLocalesForVoiceModelsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of models for specified project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            public static object GetVoiceModelsForProject(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetVoiceModelsForProjectAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of models for specified project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceModelsForProjectAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceModelsForProjectWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Copies a model from one subscription to another.
            /// </summary>
            /// <remarks>
            /// This method can be used to copy a model from one location to another. If
            /// the target subcription
            /// key belongs to a subscription created for another location, the model will
            /// be copied to that location.
            /// The location header in the response will direct to the model in the target
            /// location.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the model that will be copied.
            /// </param>
            /// <param name='modelCopyDefinition'>
            /// The body contains the subscription key of the target subscription.
            /// </param>
            public static CopyVoiceModelHeaders CopyVoiceModel(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, ModelCopy modelCopyDefinition)
            {
                return operations.CopyVoiceModelAsync(id, modelCopyDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Copies a model from one subscription to another.
            /// </summary>
            /// <remarks>
            /// This method can be used to copy a model from one location to another. If
            /// the target subcription
            /// key belongs to a subscription created for another location, the model will
            /// be copied to that location.
            /// The location header in the response will direct to the model in the target
            /// location.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the model that will be copied.
            /// </param>
            /// <param name='modelCopyDefinition'>
            /// The body contains the subscription key of the target subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CopyVoiceModelHeaders> CopyVoiceModelAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, ModelCopy modelCopyDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CopyVoiceModelWithHttpMessagesAsync(id, modelCopyDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets a list of voice synthesis under the selected subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetVoiceSyntheses(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.GetVoiceSynthesesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of voice synthesis under the selected subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceSynthesesAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceSynthesesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new synthesis.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name information (always add this string for any voice synthesis).
            /// </param>
            /// <param name='description'>
            /// Optional description information
            /// </param>
            /// <param name='locale'>
            /// The locale information (always add this string for any voice synthesis).
            /// </param>
            /// <param name='model'>
            /// The model GUID information (always add this string for any voice
            /// synthesis).
            /// </param>
            /// <param name='properties'>
            /// Optional properties of this voice synthesis (json serialized object with
            /// key/values, where all values must be strings)
            /// </param>
            /// <param name='script'>
            /// The script text file of the voice synthesis.
            /// </param>
            public static CreateVoiceSynthesisHeaders CreateVoiceSynthesis(this ISpeechServicesAPIv30Beta1 operations, string name = default(string), string description = default(string), string locale = default(string), string model = default(string), string properties = default(string), Stream script = default(Stream))
            {
                return operations.CreateVoiceSynthesisAsync(name, description, locale, model, properties, script).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new synthesis.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name information (always add this string for any voice synthesis).
            /// </param>
            /// <param name='description'>
            /// Optional description information
            /// </param>
            /// <param name='locale'>
            /// The locale information (always add this string for any voice synthesis).
            /// </param>
            /// <param name='model'>
            /// The model GUID information (always add this string for any voice
            /// synthesis).
            /// </param>
            /// <param name='properties'>
            /// Optional properties of this voice synthesis (json serialized object with
            /// key/values, where all values must be strings)
            /// </param>
            /// <param name='script'>
            /// The script text file of the voice synthesis.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateVoiceSynthesisHeaders> CreateVoiceSynthesisAsync(this ISpeechServicesAPIv30Beta1 operations, string name = default(string), string description = default(string), string locale = default(string), string model = default(string), string properties = default(string), Stream script = default(Stream), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateVoiceSynthesisWithHttpMessagesAsync(name, description, locale, model, properties, script, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets the voice synthesis identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the synthesis.
            /// </param>
            public static object GetVoiceSynthesis(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetVoiceSynthesisAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the voice synthesis identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the synthesis.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceSynthesisAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceSynthesisWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified voice synthesis task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the synthesis.
            /// </param>
            public static object DeleteVoiceSynthesis(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.DeleteVoiceSynthesisAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified voice synthesis task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the synthesis.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteVoiceSynthesisAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteVoiceSynthesisWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the mutable details of the voice synthesis identified by its ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice synthesis.
            /// </param>
            /// <param name='voiceSynthesisUpdate'>
            /// The updated values for the voice synthesis.
            /// </param>
            public static object UpdateVoiceSynthesis(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, VoiceSynthesisUpdate voiceSynthesisUpdate)
            {
                return operations.UpdateVoiceSynthesisAsync(id, voiceSynthesisUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the mutable details of the voice synthesis identified by its ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice synthesis.
            /// </param>
            /// <param name='voiceSynthesisUpdate'>
            /// The updated values for the voice synthesis.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateVoiceSynthesisAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, VoiceSynthesisUpdate voiceSynthesisUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVoiceSynthesisWithHttpMessagesAsync(id, voiceSynthesisUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of supported voices for offline synthesis.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSupportedVoicesForVoiceSynthesis(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.GetSupportedVoicesForVoiceSynthesisAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of supported voices for offline synthesis.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSupportedVoicesForVoiceSynthesisAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupportedVoicesForVoiceSynthesisWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of voice synthesis under the selected subscription with result
            /// paginated.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='top'>
            /// </param>
            public static object GetVoiceSynthesesPaginated(this ISpeechServicesAPIv30Beta1 operations, int? skip = default(int?), int? top = default(int?))
            {
                return operations.GetVoiceSynthesesPaginatedAsync(skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of voice synthesis under the selected subscription with result
            /// paginated.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceSynthesesPaginatedAsync(this ISpeechServicesAPIv30Beta1 operations, int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceSynthesesPaginatedWithHttpMessagesAsync(skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets details of all voice test under the selected subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetVoiceTests(this ISpeechServicesAPIv30Beta1 operations)
            {
                return operations.GetVoiceTestsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets details of all voice test under the selected subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceTestsAsync(this ISpeechServicesAPIv30Beta1 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceTestsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new voice test.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='voiceTestDefinition'>
            /// </param>
            public static CreateVoiceTestHeaders CreateVoiceTest(this ISpeechServicesAPIv30Beta1 operations, VoiceTestDefinitionV3 voiceTestDefinition)
            {
                return operations.CreateVoiceTestAsync(voiceTestDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new voice test.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='voiceTestDefinition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateVoiceTestHeaders> CreateVoiceTestAsync(this ISpeechServicesAPIv30Beta1 operations, VoiceTestDefinitionV3 voiceTestDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateVoiceTestWithHttpMessagesAsync(voiceTestDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets detail of the specified voice test.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice test.
            /// </param>
            public static object GetVoiceTest(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetVoiceTestAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets detail of the specified voice test.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice test.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceTestAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceTestWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified voice test.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice test.
            /// </param>
            public static DeleteVoiceTestHeaders DeleteVoiceTest(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.DeleteVoiceTestAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified voice test.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice test.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteVoiceTestHeaders> DeleteVoiceTestAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteVoiceTestWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Updates the metadata of the voice test identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice test.
            /// </param>
            /// <param name='testUpdate'>
            /// The updated values for the voice test.
            /// </param>
            public static object UpdateVoiceTest(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, VoiceTestUpdate testUpdate)
            {
                return operations.UpdateVoiceTestAsync(id, testUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the metadata of the voice test identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice test.
            /// </param>
            /// <param name='testUpdate'>
            /// The updated values for the voice test.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateVoiceTestAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, VoiceTestUpdate testUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVoiceTestWithHttpMessagesAsync(id, testUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets details of the specified model's voice test.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice test.
            /// </param>
            public static object GetVoiceTestsForModel(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetVoiceTestsForModelAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets details of the specified model's voice test.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice test.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceTestsForModelAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceTestsForModelWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the list of voice tests for specified project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            public static object GetVoiceTestsForProject(this ISpeechServicesAPIv30Beta1 operations, System.Guid id)
            {
                return operations.GetVoiceTestsForProjectAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of voice tests for specified project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the project.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceTestsForProjectAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceTestsForProjectWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the files of the voice test identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice test.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            public static object GetVoiceTestFiles(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? sasValidity = default(int?))
            {
                return operations.GetVoiceTestFilesAsync(id, sasValidity).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the files of the voice test identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice test.
            /// </param>
            /// <param name='sasValidity'>
            /// The length of time in seconds that an SAS url should be valid.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceTestFilesAsync(this ISpeechServicesAPIv30Beta1 operations, System.Guid id, int? sasValidity = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceTestFilesWithHttpMessagesAsync(id, sasValidity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
