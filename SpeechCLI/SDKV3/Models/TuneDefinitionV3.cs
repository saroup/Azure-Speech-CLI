// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Speech.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// TuneDefinitionV3
    /// </summary>
    public partial class TuneDefinitionV3
    {
        /// <summary>
        /// Initializes a new instance of the TuneDefinitionV3 class.
        /// </summary>
        public TuneDefinitionV3()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TuneDefinitionV3 class.
        /// </summary>
        /// <param name="updateType">Possible values include: 'None',
        /// 'Pronunciation', 'Break', 'Rate', 'Pitch', 'Range', 'Duration',
        /// 'Volume', 'Contour', 'Sub', 'Emphasis', 'Normalization', 'SayAs',
        /// 'Emotion', 'Clear', 'BoundaryTone', 'BackgroundMusic', 'Voice',
        /// 'ExpressAs', 'SoundEffect', 'Prompt', 'Text', 'Prosody',
        /// 'NotCrossVoice', 'All'</param>
        public TuneDefinitionV3(string updateType, string ssml, int selectionBeginIndex, int selectionLength, IDictionary<string, string> parameters)
        {
            UpdateType = updateType;
            Ssml = ssml;
            SelectionBeginIndex = selectionBeginIndex;
            SelectionLength = selectionLength;
            Parameters = parameters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'None', 'Pronunciation',
        /// 'Break', 'Rate', 'Pitch', 'Range', 'Duration', 'Volume', 'Contour',
        /// 'Sub', 'Emphasis', 'Normalization', 'SayAs', 'Emotion', 'Clear',
        /// 'BoundaryTone', 'BackgroundMusic', 'Voice', 'ExpressAs',
        /// 'SoundEffect', 'Prompt', 'Text', 'Prosody', 'NotCrossVoice', 'All'
        /// </summary>
        [JsonProperty(PropertyName = "updateType")]
        public string UpdateType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ssml")]
        public string Ssml { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "selectionBeginIndex")]
        public int SelectionBeginIndex { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "selectionLength")]
        public int SelectionLength { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "parameters")]
        public IDictionary<string, string> Parameters { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (UpdateType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UpdateType");
            }
            if (Ssml == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Ssml");
            }
            if (Parameters == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Parameters");
            }
            if (SelectionBeginIndex > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "SelectionBeginIndex", 2147483647);
            }
            if (SelectionBeginIndex < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "SelectionBeginIndex", 0);
            }
            if (SelectionLength > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "SelectionLength", 2147483647);
            }
            if (SelectionLength < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "SelectionLength", 0);
            }
        }
    }
}
