// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Speech.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// VoiceEndpointDefinitionV3
    /// </summary>
    public partial class VoiceEndpointDefinitionV3
    {
        /// <summary>
        /// Initializes a new instance of the VoiceEndpointDefinitionV3 class.
        /// </summary>
        public VoiceEndpointDefinitionV3()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VoiceEndpointDefinitionV3 class.
        /// </summary>
        /// <param name="locale">The locale of the contained data</param>
        /// <param name="name">The name of the object</param>
        /// <param name="project">The project, the endpoint is associated
        /// with</param>
        /// <param name="contentLoggingEnabled">A value indicating whether
        /// content logging (audio &amp;amp; transcriptions) is being used for
        /// a deployment</param>
        /// <param name="text">The text used to adapt a language model for this
        /// endpoint</param>
        /// <param name="modelsProperty">Information about the deployed
        /// models</param>
        /// <param name="description">The description of the object</param>
        /// <param name="properties">The custom properties of this
        /// entity</param>
        public VoiceEndpointDefinitionV3(string locale, string name, ProjectIdentity project = default(ProjectIdentity), bool? contentLoggingEnabled = default(bool?), string text = default(string), IList<ModelIdentity> modelsProperty = default(IList<ModelIdentity>), string description = default(string), IDictionary<string, string> properties = default(IDictionary<string, string>))
        {
            Project = project;
            ContentLoggingEnabled = contentLoggingEnabled;
            Text = text;
            ModelsProperty = modelsProperty;
            Description = description;
            Properties = properties;
            Locale = locale;
            Name = name;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the project, the endpoint is associated with
        /// </summary>
        [JsonProperty(PropertyName = "project")]
        public ProjectIdentity Project { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether content logging (audio
        /// &amp;amp;amp; transcriptions) is being used for a deployment
        /// </summary>
        [JsonProperty(PropertyName = "contentLoggingEnabled")]
        public bool? ContentLoggingEnabled { get; set; }

        /// <summary>
        /// Gets or sets the text used to adapt a language model for this
        /// endpoint
        /// </summary>
        [JsonProperty(PropertyName = "text")]
        public string Text { get; set; }

        /// <summary>
        /// Gets or sets information about the deployed models
        /// </summary>
        [JsonProperty(PropertyName = "models")]
        public IList<ModelIdentity> ModelsProperty { get; set; }

        /// <summary>
        /// Gets or sets the description of the object
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the custom properties of this entity
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Gets or sets the locale of the contained data
        /// </summary>
        [JsonProperty(PropertyName = "locale")]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or sets the name of the object
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Locale == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Locale");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Project != null)
            {
                Project.Validate();
            }
            if (ModelsProperty != null)
            {
                foreach (var element in ModelsProperty)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
