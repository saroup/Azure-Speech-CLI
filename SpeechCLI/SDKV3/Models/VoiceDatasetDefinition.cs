// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Speech.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// VoiceDatasetDefinition
    /// </summary>
    public partial class VoiceDatasetDefinition
    {
        /// <summary>
        /// Initializes a new instance of the VoiceDatasetDefinition class.
        /// </summary>
        public VoiceDatasetDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VoiceDatasetDefinition class.
        /// </summary>
        /// <param name="gender">The gender of the voice in dataset. Possible
        /// values include: 'None', 'Male', 'Female'</param>
        /// <param name="audioDataUrl">The URL of the audio data for the
        /// dataset</param>
        /// <param name="locale">The locale of the contained data</param>
        /// <param name="name">The name of the object</param>
        /// <param name="voiceDatasetType">The import type of dataset (Normal,
        /// LongAudio or AudioOnly). Default is Normal: Individual utterances +
        /// matching transcript. Possible values include: 'Normal',
        /// 'LongAudio', 'AudioOnly'</param>
        /// <param name="transcriptDataUrl">The URL of the transcript data for
        /// the dataset</param>
        /// <param name="subscriptionKey">The subscription key used for long
        /// audio / audio only data dataset</param>
        /// <param name="project">The project, the dataset is associated
        /// with</param>
        /// <param name="description">The description of the object</param>
        /// <param name="properties">The custom properties of this
        /// entity</param>
        public VoiceDatasetDefinition(string gender, string audioDataUrl, string locale, string name, string voiceDatasetType = default(string), string transcriptDataUrl = default(string), string subscriptionKey = default(string), ProjectIdentity project = default(ProjectIdentity), string description = default(string), IDictionary<string, string> properties = default(IDictionary<string, string>))
        {
            VoiceDatasetType = voiceDatasetType;
            Gender = gender;
            AudioDataUrl = audioDataUrl;
            TranscriptDataUrl = transcriptDataUrl;
            SubscriptionKey = subscriptionKey;
            Project = project;
            Locale = locale;
            Name = name;
            Description = description;
            Properties = properties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the import type of dataset (Normal, LongAudio or
        /// AudioOnly). Default is Normal: Individual utterances + matching
        /// transcript. Possible values include: 'Normal', 'LongAudio',
        /// 'AudioOnly'
        /// </summary>
        [JsonProperty(PropertyName = "voiceDatasetType")]
        public string VoiceDatasetType { get; set; }

        /// <summary>
        /// Gets or sets the gender of the voice in dataset. Possible values
        /// include: 'None', 'Male', 'Female'
        /// </summary>
        [JsonProperty(PropertyName = "gender")]
        public string Gender { get; set; }

        /// <summary>
        /// Gets or sets the URL of the audio data for the dataset
        /// </summary>
        [JsonProperty(PropertyName = "audioDataUrl")]
        public string AudioDataUrl { get; set; }

        /// <summary>
        /// Gets or sets the URL of the transcript data for the dataset
        /// </summary>
        [JsonProperty(PropertyName = "transcriptDataUrl")]
        public string TranscriptDataUrl { get; set; }

        /// <summary>
        /// Gets or sets the subscription key used for long audio / audio only
        /// data dataset
        /// </summary>
        [JsonProperty(PropertyName = "subscriptionKey")]
        public string SubscriptionKey { get; set; }

        /// <summary>
        /// Gets or sets the project, the dataset is associated with
        /// </summary>
        [JsonProperty(PropertyName = "project")]
        public ProjectIdentity Project { get; set; }

        /// <summary>
        /// Gets or sets the locale of the contained data
        /// </summary>
        [JsonProperty(PropertyName = "locale")]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or sets the name of the object
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the description of the object
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the custom properties of this entity
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Gender == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Gender");
            }
            if (AudioDataUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AudioDataUrl");
            }
            if (Locale == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Locale");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Project != null)
            {
                Project.Validate();
            }
        }
    }
}
