// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Speech.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// InternalDataImportFromDonationDefinition
    /// </summary>
    public partial class InternalDataImportFromDonationDefinition
    {
        /// <summary>
        /// Initializes a new instance of the
        /// InternalDataImportFromDonationDefinition class.
        /// </summary>
        public InternalDataImportFromDonationDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// InternalDataImportFromDonationDefinition class.
        /// </summary>
        /// <param name="dataDonationId">The id of the data donation</param>
        /// <param name="transcriptions">The list of utterances</param>
        /// <param name="locale">The locale of the contained data</param>
        public InternalDataImportFromDonationDefinition(DataCollectionDonationIdentity dataDonationId, IList<UtteranceDefinition> transcriptions, string locale)
        {
            DataDonationId = dataDonationId;
            Transcriptions = transcriptions;
            Locale = locale;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for InternalDataImportFromDonationDefinition
        /// class.
        /// </summary>
        static InternalDataImportFromDonationDefinition()
        {
            DataDonationKind = "DataCollection";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the id of the data donation
        /// </summary>
        [JsonProperty(PropertyName = "dataDonationId")]
        public DataCollectionDonationIdentity DataDonationId { get; set; }

        /// <summary>
        /// Gets or sets the list of utterances
        /// </summary>
        [JsonProperty(PropertyName = "transcriptions")]
        public IList<UtteranceDefinition> Transcriptions { get; set; }

        /// <summary>
        /// Gets or sets the locale of the contained data
        /// </summary>
        [JsonProperty(PropertyName = "locale")]
        public string Locale { get; set; }

        /// <summary>
        /// The kind of the data donation (e.g. DataCollection)
        /// </summary>
        [JsonProperty(PropertyName = "dataDonationKind")]
        public static string DataDonationKind { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DataDonationId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DataDonationId");
            }
            if (Transcriptions == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Transcriptions");
            }
            if (Locale == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Locale");
            }
            if (DataDonationId != null)
            {
                DataDonationId.Validate();
            }
            if (Transcriptions != null)
            {
                foreach (var element in Transcriptions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
