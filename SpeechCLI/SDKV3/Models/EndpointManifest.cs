// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Speech.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// EndpointManifest
    /// </summary>
    public partial class EndpointManifest
    {
        /// <summary>
        /// Initializes a new instance of the EndpointManifest class.
        /// </summary>
        public EndpointManifest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EndpointManifest class.
        /// </summary>
        /// <param name="model">The model, the endpoint is associated
        /// with</param>
        /// <param name="modelFiles">The model files, the endpoint
        /// requires</param>
        /// <param name="properties">IReadOnlyDictionary`2</param>
        public EndpointManifest(ModelIdentity model = default(ModelIdentity), IList<ModelFile> modelFiles = default(IList<ModelFile>), IDictionary<string, object> properties = default(IDictionary<string, object>))
        {
            Model = model;
            ModelFiles = modelFiles;
            Properties = properties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the model, the endpoint is associated with
        /// </summary>
        [JsonProperty(PropertyName = "model")]
        public ModelIdentity Model { get; set; }

        /// <summary>
        /// Gets or sets the model files, the endpoint requires
        /// </summary>
        [JsonProperty(PropertyName = "modelFiles")]
        public IList<ModelFile> ModelFiles { get; set; }

        /// <summary>
        /// Gets or sets iReadOnlyDictionary`2
        /// </summary>
        /// <remarks>
        /// The configuration of the endpoint
        /// </remarks>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, object> Properties { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Model != null)
            {
                Model.Validate();
            }
        }
    }
}
