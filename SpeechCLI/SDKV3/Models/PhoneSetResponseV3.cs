// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Speech.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// PhoneSetResponseV3
    /// </summary>
    public partial class PhoneSetResponseV3
    {
        /// <summary>
        /// Initializes a new instance of the PhoneSetResponseV3 class.
        /// </summary>
        public PhoneSetResponseV3()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PhoneSetResponseV3 class.
        /// </summary>
        /// <param name="type">Possible values include: 'None', 'Sapi', 'Ups',
        /// 'Ipa', 'Tts', 'All'</param>
        public PhoneSetResponseV3(string type, IList<PhoneResponseV3> phones)
        {
            Type = type;
            Phones = phones;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'None', 'Sapi', 'Ups', 'Ipa',
        /// 'Tts', 'All'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "phones")]
        public IList<PhoneResponseV3> Phones { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (Phones == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Phones");
            }
            if (Phones != null)
            {
                foreach (var element in Phones)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
