// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Speech.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// SsmlSayAsTagFormatMetadataResponseV3
    /// </summary>
    public partial class SsmlSayAsTagFormatMetadataResponseV3
    {
        /// <summary>
        /// Initializes a new instance of the
        /// SsmlSayAsTagFormatMetadataResponseV3 class.
        /// </summary>
        public SsmlSayAsTagFormatMetadataResponseV3()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// SsmlSayAsTagFormatMetadataResponseV3 class.
        /// </summary>
        public SsmlSayAsTagFormatMetadataResponseV3(string fomat, string detail = default(string), string description = default(string), string example = default(string))
        {
            Fomat = fomat;
            Detail = detail;
            Description = description;
            Example = example;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fomat")]
        public string Fomat { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "detail")]
        public string Detail { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "example")]
        public string Example { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Fomat == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Fomat");
            }
        }
    }
}
