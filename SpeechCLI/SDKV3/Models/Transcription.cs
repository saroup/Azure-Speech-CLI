// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Speech.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Transcription
    /// </summary>
    public partial class Transcription
    {
        /// <summary>
        /// Initializes a new instance of the Transcription class.
        /// </summary>
        public Transcription()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Transcription class.
        /// </summary>
        /// <param name="displayName">The display name of the object</param>
        /// <param name="locale">The locale of the contained data</param>
        /// <param name="links">Related links to this transcription
        /// entity</param>
        /// <param name="transcriptionProperties">Additional configuration
        /// options when creating a new transcription and additional metadata
        /// provided by the service</param>
        /// <param name="self">The location of this entity</param>
        /// <param name="project">The project, the transcription is associated
        /// with</param>
        /// <param name="dataset">A list of acoustic or audio files datasets
        /// containing the audio files that will be transcribed</param>
        /// <param name="description">The description of the object</param>
        /// <param name="modelsProperty">The models used in this
        /// transcription</param>
        /// <param name="properties">The custom properties of this
        /// entity</param>
        /// <param name="failureReason">The failure reason for the
        /// transcription</param>
        /// <param name="lastActionDateTime">The time-stamp when the current
        /// status was entered</param>
        /// <param name="status">The status of the object. Possible values
        /// include: 'NotStarted', 'Running', 'Succeeded', 'Failed'</param>
        /// <param name="createdDateTime">The time-stamp when the object was
        /// created</param>
        public Transcription(string displayName, string locale, FileLinks links = default(FileLinks), TranscriptionProperties transcriptionProperties = default(TranscriptionProperties), string self = default(string), EntityReference project = default(EntityReference), EntityReference dataset = default(EntityReference), string description = default(string), IList<string> recordingsUrls = default(IList<string>), IList<EntityReference> modelsProperty = default(IList<EntityReference>), IDictionary<string, string> properties = default(IDictionary<string, string>), string failureReason = default(string), System.DateTime? lastActionDateTime = default(System.DateTime?), string status = default(string), System.DateTime? createdDateTime = default(System.DateTime?))
        {
            Links = links;
            TranscriptionProperties = transcriptionProperties;
            Self = self;
            Project = project;
            Dataset = dataset;
            DisplayName = displayName;
            Description = description;
            RecordingsUrls = recordingsUrls;
            ModelsProperty = modelsProperty;
            Locale = locale;
            Properties = properties;
            FailureReason = failureReason;
            LastActionDateTime = lastActionDateTime;
            Status = status;
            CreatedDateTime = createdDateTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets related links to this transcription entity
        /// </summary>
        [JsonProperty(PropertyName = "links")]
        public FileLinks Links { get; private set; }

        /// <summary>
        /// Gets or sets additional configuration options when creating a new
        /// transcription and additional metadata provided by the service
        /// </summary>
        [JsonProperty(PropertyName = "transcriptionProperties")]
        public TranscriptionProperties TranscriptionProperties { get; set; }

        /// <summary>
        /// Gets the location of this entity
        /// </summary>
        [JsonProperty(PropertyName = "self")]
        public string Self { get; private set; }

        /// <summary>
        /// Gets or sets the project, the transcription is associated with
        /// </summary>
        [JsonProperty(PropertyName = "project")]
        public EntityReference Project { get; set; }

        /// <summary>
        /// Gets or sets a list of acoustic or audio files datasets containing
        /// the audio files that will be transcribed
        /// </summary>
        [JsonProperty(PropertyName = "dataset")]
        public EntityReference Dataset { get; set; }

        /// <summary>
        /// Gets or sets the display name of the object
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the description of the object
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "recordingsUrls")]
        public IList<string> RecordingsUrls { get; set; }

        /// <summary>
        /// Gets or sets the models used in this transcription
        /// </summary>
        [JsonProperty(PropertyName = "models")]
        public IList<EntityReference> ModelsProperty { get; set; }

        /// <summary>
        /// Gets or sets the locale of the contained data
        /// </summary>
        [JsonProperty(PropertyName = "locale")]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or sets the custom properties of this entity
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Gets the failure reason for the transcription
        /// </summary>
        [JsonProperty(PropertyName = "failureReason")]
        public string FailureReason { get; private set; }

        /// <summary>
        /// Gets the time-stamp when the current status was entered
        /// </summary>
        [JsonProperty(PropertyName = "lastActionDateTime")]
        public System.DateTime? LastActionDateTime { get; private set; }

        /// <summary>
        /// Gets the status of the object. Possible values include:
        /// 'NotStarted', 'Running', 'Succeeded', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; private set; }

        /// <summary>
        /// Gets the time-stamp when the object was created
        /// </summary>
        [JsonProperty(PropertyName = "createdDateTime")]
        public System.DateTime? CreatedDateTime { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DisplayName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DisplayName");
            }
            if (Locale == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Locale");
            }
            if (Project != null)
            {
                Project.Validate();
            }
            if (Dataset != null)
            {
                Dataset.Validate();
            }
            if (ModelsProperty != null)
            {
                foreach (var element in ModelsProperty)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
