// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Speech.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// LanguageDataResponseV3
    /// </summary>
    public partial class LanguageDataResponseV3
    {
        /// <summary>
        /// Initializes a new instance of the LanguageDataResponseV3 class.
        /// </summary>
        public LanguageDataResponseV3()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LanguageDataResponseV3 class.
        /// </summary>
        /// <param name="language">Possible values include: 'Neutral', 'ArEG',
        /// 'ArSA', 'CaES', 'CsCZ', 'DaDK', 'DeAT', 'DeCH', 'DeDE', 'ElGR',
        /// 'EnAU', 'EnCA', 'EnGB', 'EnIE', 'EnIN', 'EnUS', 'EsES', 'EsMX',
        /// 'FiFI', 'FrBE', 'FrCA', 'FrCH', 'FrFR', 'HeIL', 'HiIN', 'TeIN',
        /// 'HuHU', 'IdID', 'ItIT', 'JaJP', 'KoKR', 'NbNO', 'NlBE', 'NlNL',
        /// 'PlPL', 'PtBR', 'PtPT', 'RoRO', 'RuRU', 'SkSK', 'SvSE', 'ThTH',
        /// 'TrTR', 'ZhCN', 'ZhHK', 'ZhTW', 'TaIN'</param>
        /// <param name="properties">IDictionary`2</param>
        public LanguageDataResponseV3(string language, IList<PhoneSetResponseV3> phoneSets, IDictionary<string, string> properties)
        {
            Language = language;
            PhoneSets = phoneSets;
            Properties = properties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'Neutral', 'ArEG', 'ArSA',
        /// 'CaES', 'CsCZ', 'DaDK', 'DeAT', 'DeCH', 'DeDE', 'ElGR', 'EnAU',
        /// 'EnCA', 'EnGB', 'EnIE', 'EnIN', 'EnUS', 'EsES', 'EsMX', 'FiFI',
        /// 'FrBE', 'FrCA', 'FrCH', 'FrFR', 'HeIL', 'HiIN', 'TeIN', 'HuHU',
        /// 'IdID', 'ItIT', 'JaJP', 'KoKR', 'NbNO', 'NlBE', 'NlNL', 'PlPL',
        /// 'PtBR', 'PtPT', 'RoRO', 'RuRU', 'SkSK', 'SvSE', 'ThTH', 'TrTR',
        /// 'ZhCN', 'ZhHK', 'ZhTW', 'TaIN'
        /// </summary>
        [JsonProperty(PropertyName = "language")]
        public string Language { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "phoneSets")]
        public IList<PhoneSetResponseV3> PhoneSets { get; set; }

        /// <summary>
        /// Gets or sets iDictionary`2
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Language == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Language");
            }
            if (PhoneSets == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PhoneSets");
            }
            if (Properties == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Properties");
            }
            if (PhoneSets != null)
            {
                foreach (var element in PhoneSets)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
