// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Speech.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// EditVcgFileDefinitionV3
    /// </summary>
    public partial class EditVcgFileDefinitionV3
    {
        /// <summary>
        /// Initializes a new instance of the EditVcgFileDefinitionV3 class.
        /// </summary>
        public EditVcgFileDefinitionV3()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EditVcgFileDefinitionV3 class.
        /// </summary>
        /// <param name="status">Possible values include: 'None', 'New',
        /// 'Editing', 'Completed', 'Redo', 'Approved'</param>
        public EditVcgFileDefinitionV3(System.Guid fileTaskId, string name = default(string), string content = default(string), string status = default(string), bool? isSetTags = default(bool?), IList<string> tags = default(IList<string>))
        {
            FileTaskId = fileTaskId;
            Name = name;
            Content = content;
            Status = status;
            IsSetTags = isSetTags;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fileTaskId")]
        public System.Guid FileTaskId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "content")]
        public string Content { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'None', 'New', 'Editing',
        /// 'Completed', 'Redo', 'Approved'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isSetTags")]
        public bool? IsSetTags { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IList<string> Tags { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
