// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Speech.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// VoiceDatasetUpdate
    /// </summary>
    public partial class VoiceDatasetUpdate
    {
        /// <summary>
        /// Initializes a new instance of the VoiceDatasetUpdate class.
        /// </summary>
        public VoiceDatasetUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VoiceDatasetUpdate class.
        /// </summary>
        /// <param name="name">The name of the object</param>
        /// <param name="project">The project, the entity is associated
        /// with</param>
        /// <param name="description">The description of the object</param>
        public VoiceDatasetUpdate(string name, ProjectIdentity project = default(ProjectIdentity), string description = default(string))
        {
            Project = project;
            Name = name;
            Description = description;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the project, the entity is associated with
        /// </summary>
        [JsonProperty(PropertyName = "project")]
        public ProjectIdentity Project { get; set; }

        /// <summary>
        /// Gets or sets the name of the object
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the description of the object
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Project != null)
            {
                Project.Validate();
            }
        }
    }
}
