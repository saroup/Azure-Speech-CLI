// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Speech.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// TranscriptionProperties
    /// </summary>
    public partial class TranscriptionProperties
    {
        /// <summary>
        /// Initializes a new instance of the TranscriptionProperties class.
        /// </summary>
        public TranscriptionProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TranscriptionProperties class.
        /// </summary>
        /// <param name="addDiarization">A value indicating whether diarization
        /// (speaker separation) is requested</param>
        /// <param name="addSentiment">A value indicating whether sentiment
        /// analysis is requested</param>
        /// <param name="addWordLevelTimestamps">A value indicating whether
        /// word level timestamps are requested</param>
        /// <param name="duration">The duration of the transcription</param>
        /// <param name="channels">The requested channel numbers separated by
        /// comma</param>
        /// <param name="destinationContainerUrl">The requested destination
        /// container</param>
        /// <param name="punctuationMode">The requested punctuation mode.
        /// Possible values include: 'None', 'Dictated', 'Automatic',
        /// 'DictatedAndAutomatic'</param>
        /// <param name="profanityFilterMode">The requested profanity filter
        /// mode. Possible values include: 'None', 'Removed', 'Tags',
        /// 'Masked'</param>
        /// <param name="timeToLive">How long the transcription will be kept in
        /// the system</param>
        /// <param name="email">The email address to send email notifications
        /// to in case the operation completes.
        /// The value will be removed after successfully sending the
        /// email</param>
        public TranscriptionProperties(bool? addDiarization = default(bool?), bool? addSentiment = default(bool?), bool? addWordLevelTimestamps = default(bool?), string duration = default(string), string channels = default(string), string destinationContainerUrl = default(string), string punctuationMode = default(string), string profanityFilterMode = default(string), string timeToLive = default(string), string email = default(string))
        {
            AddDiarization = addDiarization;
            AddSentiment = addSentiment;
            AddWordLevelTimestamps = addWordLevelTimestamps;
            Duration = duration;
            Channels = channels;
            DestinationContainerUrl = destinationContainerUrl;
            PunctuationMode = punctuationMode;
            ProfanityFilterMode = profanityFilterMode;
            TimeToLive = timeToLive;
            Email = email;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a value indicating whether diarization (speaker
        /// separation) is requested
        /// </summary>
        [JsonProperty(PropertyName = "addDiarization")]
        public bool? AddDiarization { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether sentiment analysis is
        /// requested
        /// </summary>
        [JsonProperty(PropertyName = "addSentiment")]
        public bool? AddSentiment { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether word level timestamps are
        /// requested
        /// </summary>
        [JsonProperty(PropertyName = "addWordLevelTimestamps")]
        public bool? AddWordLevelTimestamps { get; set; }

        /// <summary>
        /// Gets the duration of the transcription
        /// </summary>
        [JsonProperty(PropertyName = "duration")]
        public string Duration { get; private set; }

        /// <summary>
        /// Gets or sets the requested channel numbers separated by comma
        /// </summary>
        [JsonProperty(PropertyName = "channels")]
        public string Channels { get; set; }

        /// <summary>
        /// Gets or sets the requested destination container
        /// </summary>
        [JsonProperty(PropertyName = "destinationContainerUrl")]
        public string DestinationContainerUrl { get; set; }

        /// <summary>
        /// Gets or sets the requested punctuation mode. Possible values
        /// include: 'None', 'Dictated', 'Automatic', 'DictatedAndAutomatic'
        /// </summary>
        [JsonProperty(PropertyName = "punctuationMode")]
        public string PunctuationMode { get; set; }

        /// <summary>
        /// Gets or sets the requested profanity filter mode. Possible values
        /// include: 'None', 'Removed', 'Tags', 'Masked'
        /// </summary>
        [JsonProperty(PropertyName = "profanityFilterMode")]
        public string ProfanityFilterMode { get; set; }

        /// <summary>
        /// Gets or sets how long the transcription will be kept in the system
        /// </summary>
        [JsonProperty(PropertyName = "timeToLive")]
        public string TimeToLive { get; set; }

        /// <summary>
        /// Gets or sets the email address to send email notifications to in
        /// case the operation completes.
        /// The value will be removed after successfully sending the email
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

    }
}
