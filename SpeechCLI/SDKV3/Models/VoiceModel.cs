// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Speech.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// VoiceModel
    /// </summary>
    public partial class VoiceModel
    {
        /// <summary>
        /// Initializes a new instance of the VoiceModel class.
        /// </summary>
        public VoiceModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VoiceModel class.
        /// </summary>
        /// <param name="id">The identifier of this entity</param>
        /// <param name="name">The name of the object</param>
        /// <param name="locale">The locale of the contained data</param>
        /// <param name="description">The description of the object</param>
        /// <param name="text">The text used to adapt this language
        /// model</param>
        /// <param name="baseModel">The base model used for adaptation</param>
        /// <param name="datasets">Datasets used for adaptation</param>
        /// <param name="properties">The custom properties of this
        /// entity</param>
        /// <param name="lastActionDateTime">The time-stamp when the current
        /// status was entered</param>
        /// <param name="status">The status of the object. Possible values
        /// include: 'NotStarted', 'Running', 'Succeeded', 'Failed'</param>
        /// <param name="createdDateTime">The time-stamp when the object was
        /// created</param>
        /// <param name="project">The project, the entity is associated
        /// with</param>
        public VoiceModel(System.Guid id, string name, string locale, string description = default(string), string text = default(string), VoiceModel baseModel = default(VoiceModel), IList<VoiceDataset> datasets = default(IList<VoiceDataset>), IDictionary<string, string> properties = default(IDictionary<string, string>), System.DateTime? lastActionDateTime = default(System.DateTime?), string status = default(string), System.DateTime? createdDateTime = default(System.DateTime?), ProjectIdentity project = default(ProjectIdentity))
        {
            Id = id;
            Name = name;
            Description = description;
            Text = text;
            BaseModel = baseModel;
            Datasets = datasets;
            Properties = properties;
            Locale = locale;
            LastActionDateTime = lastActionDateTime;
            Status = status;
            CreatedDateTime = createdDateTime;
            Project = project;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the identifier of this entity
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the name of the object
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the description of the object
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the text used to adapt this language model
        /// </summary>
        [JsonProperty(PropertyName = "text")]
        public string Text { get; set; }

        /// <summary>
        /// Gets or sets the base model used for adaptation
        /// </summary>
        [JsonProperty(PropertyName = "baseModel")]
        public VoiceModel BaseModel { get; set; }

        /// <summary>
        /// Gets or sets datasets used for adaptation
        /// </summary>
        [JsonProperty(PropertyName = "datasets")]
        public IList<VoiceDataset> Datasets { get; set; }

        /// <summary>
        /// Gets or sets the custom properties of this entity
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Gets or sets the locale of the contained data
        /// </summary>
        [JsonProperty(PropertyName = "locale")]
        public string Locale { get; set; }

        /// <summary>
        /// Gets the time-stamp when the current status was entered
        /// </summary>
        [JsonProperty(PropertyName = "lastActionDateTime")]
        public System.DateTime? LastActionDateTime { get; private set; }

        /// <summary>
        /// Gets the status of the object. Possible values include:
        /// 'NotStarted', 'Running', 'Succeeded', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; private set; }

        /// <summary>
        /// Gets the time-stamp when the object was created
        /// </summary>
        [JsonProperty(PropertyName = "createdDateTime")]
        public System.DateTime? CreatedDateTime { get; private set; }

        /// <summary>
        /// Gets or sets the project, the entity is associated with
        /// </summary>
        [JsonProperty(PropertyName = "project")]
        public ProjectIdentity Project { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Locale == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Locale");
            }
            if (BaseModel != null)
            {
                BaseModel.Validate();
            }
            if (Datasets != null)
            {
                foreach (var element in Datasets)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Project != null)
            {
                Project.Validate();
            }
        }
    }
}
