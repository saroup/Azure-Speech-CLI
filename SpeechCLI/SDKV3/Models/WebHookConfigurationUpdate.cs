// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Speech.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// WebHookConfigurationUpdate
    /// </summary>
    public partial class WebHookConfigurationUpdate
    {
        /// <summary>
        /// Initializes a new instance of the WebHookConfigurationUpdate class.
        /// </summary>
        public WebHookConfigurationUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WebHookConfigurationUpdate class.
        /// </summary>
        /// <param name="url">The registered URL that will be used to send the
        /// POST requests for the registered events to</param>
        /// <param name="secret">A secret that will be used to create a SHA256
        /// hash of the payload with the secret as HMAC key.
        /// This hash will be set as X-MicrosoftSpeechServices-Signature header
        /// when calling back into the registered URL</param>
        public WebHookConfigurationUpdate(string url = default(string), string secret = default(string))
        {
            Url = url;
            Secret = secret;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the registered URL that will be used to send the POST
        /// requests for the registered events to
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or sets a secret that will be used to create a SHA256 hash of
        /// the payload with the secret as HMAC key.
        /// This hash will be set as X-MicrosoftSpeechServices-Signature header
        /// when calling back into the registered URL
        /// </summary>
        [JsonProperty(PropertyName = "secret")]
        public string Secret { get; set; }

    }
}
