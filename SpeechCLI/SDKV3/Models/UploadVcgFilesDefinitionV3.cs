// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Speech.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// UploadVcgFilesDefinitionV3
    /// </summary>
    public partial class UploadVcgFilesDefinitionV3
    {
        /// <summary>
        /// Initializes a new instance of the UploadVcgFilesDefinitionV3 class.
        /// </summary>
        public UploadVcgFilesDefinitionV3()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UploadVcgFilesDefinitionV3 class.
        /// </summary>
        public UploadVcgFilesDefinitionV3(IList<UploadVcgFileDefinitionV3> files, System.Guid? parentFolderId = default(System.Guid?), SplitSsmlOrPlainTextFileOptionsDefinitionV3 splitFileOptions = default(SplitSsmlOrPlainTextFileOptionsDefinitionV3))
        {
            ParentFolderId = parentFolderId;
            Files = files;
            SplitFileOptions = splitFileOptions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "parentFolderId")]
        public System.Guid? ParentFolderId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "files")]
        public IList<UploadVcgFileDefinitionV3> Files { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "splitFileOptions")]
        public SplitSsmlOrPlainTextFileOptionsDefinitionV3 SplitFileOptions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Files == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Files");
            }
            if (Files != null)
            {
                foreach (var element in Files)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
