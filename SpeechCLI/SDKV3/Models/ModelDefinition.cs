// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Speech.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// ModelDefinition
    /// </summary>
    public partial class ModelDefinition
    {
        /// <summary>
        /// Initializes a new instance of the ModelDefinition class.
        /// </summary>
        public ModelDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ModelDefinition class.
        /// </summary>
        /// <param name="modelKind">The kind of this model (e.g. acoustic,
        /// language ...). Possible values include: 'None', 'Acoustic',
        /// 'Language', 'AcousticAndLanguage', 'CustomVoice', 'Sentiment',
        /// 'LanguageIdentification', 'Diarization', 'Keyword',
        /// 'PronunciationScore'</param>
        /// <param name="locale">The locale of the contained data</param>
        /// <param name="name">The name of the object</param>
        /// <param name="text">The text used to adapt this language
        /// model</param>
        /// <param name="baseModel">The base model used for adaptation</param>
        /// <param name="datasets">Datasets used for adaptation</param>
        /// <param name="description">The description of the object</param>
        /// <param name="properties">The custom properties of this
        /// entity</param>
        public ModelDefinition(string modelKind, string locale, string name, string text = default(string), ModelIdentity baseModel = default(ModelIdentity), IList<DatasetIdentity> datasets = default(IList<DatasetIdentity>), string description = default(string), IDictionary<string, string> properties = default(IDictionary<string, string>))
        {
            ModelKind = modelKind;
            Text = text;
            BaseModel = baseModel;
            Datasets = datasets;
            Description = description;
            Properties = properties;
            Locale = locale;
            Name = name;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the kind of this model (e.g. acoustic, language ...).
        /// Possible values include: 'None', 'Acoustic', 'Language',
        /// 'AcousticAndLanguage', 'CustomVoice', 'Sentiment',
        /// 'LanguageIdentification', 'Diarization', 'Keyword',
        /// 'PronunciationScore'
        /// </summary>
        [JsonProperty(PropertyName = "modelKind")]
        public string ModelKind { get; set; }

        /// <summary>
        /// Gets or sets the text used to adapt this language model
        /// </summary>
        [JsonProperty(PropertyName = "text")]
        public string Text { get; set; }

        /// <summary>
        /// Gets or sets the base model used for adaptation
        /// </summary>
        [JsonProperty(PropertyName = "baseModel")]
        public ModelIdentity BaseModel { get; set; }

        /// <summary>
        /// Gets or sets datasets used for adaptation
        /// </summary>
        [JsonProperty(PropertyName = "datasets")]
        public IList<DatasetIdentity> Datasets { get; set; }

        /// <summary>
        /// Gets or sets the description of the object
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the custom properties of this entity
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Gets or sets the locale of the contained data
        /// </summary>
        [JsonProperty(PropertyName = "locale")]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or sets the name of the object
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ModelKind == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ModelKind");
            }
            if (Locale == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Locale");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (BaseModel != null)
            {
                BaseModel.Validate();
            }
            if (Datasets != null)
            {
                foreach (var element in Datasets)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
