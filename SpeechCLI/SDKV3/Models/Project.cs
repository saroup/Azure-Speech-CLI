// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Speech.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Project
    /// </summary>
    public partial class Project
    {
        /// <summary>
        /// Initializes a new instance of the Project class.
        /// </summary>
        public Project()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Project class.
        /// </summary>
        /// <param name="displayName">The display name of the object</param>
        /// <param name="locale">The locale of the contained data</param>
        /// <param name="links">Related links to this model entity</param>
        /// <param name="projectProperties">Additional metadata provided by the
        /// service</param>
        /// <param name="self">The location of this entity</param>
        /// <param name="description">The description of the object</param>
        /// <param name="properties">The custom properties of this
        /// entity</param>
        /// <param name="createdDateTime">The time-stamp when the object was
        /// created</param>
        public Project(string displayName, string locale, ProjectLinks links = default(ProjectLinks), ProjectProperties projectProperties = default(ProjectProperties), string self = default(string), string description = default(string), IDictionary<string, string> properties = default(IDictionary<string, string>), System.DateTime? createdDateTime = default(System.DateTime?))
        {
            Links = links;
            ProjectProperties = projectProperties;
            Self = self;
            DisplayName = displayName;
            Description = description;
            Properties = properties;
            Locale = locale;
            CreatedDateTime = createdDateTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets related links to this model entity
        /// </summary>
        [JsonProperty(PropertyName = "links")]
        public ProjectLinks Links { get; private set; }

        /// <summary>
        /// Gets additional metadata provided by the service
        /// </summary>
        [JsonProperty(PropertyName = "projectProperties")]
        public ProjectProperties ProjectProperties { get; private set; }

        /// <summary>
        /// Gets the location of this entity
        /// </summary>
        [JsonProperty(PropertyName = "self")]
        public string Self { get; private set; }

        /// <summary>
        /// Gets or sets the display name of the object
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the description of the object
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the custom properties of this entity
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Gets or sets the locale of the contained data
        /// </summary>
        [JsonProperty(PropertyName = "locale")]
        public string Locale { get; set; }

        /// <summary>
        /// Gets the time-stamp when the object was created
        /// </summary>
        [JsonProperty(PropertyName = "createdDateTime")]
        public System.DateTime? CreatedDateTime { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DisplayName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DisplayName");
            }
            if (Locale == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Locale");
            }
        }
    }
}
