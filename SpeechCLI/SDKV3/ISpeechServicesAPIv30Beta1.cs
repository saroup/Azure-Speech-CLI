// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Speech
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;
    using File = Models.File;

    /// <summary>
    /// Speech Services API v3.0-beta1.
    /// </summary>
    public partial interface ISpeechServicesAPIv30Beta1 : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// Gets a list of keywords for the authenticated subscription.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetKeywordDatasetsHeaders>> GetKeywordDatasetsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the keyword identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the keyword.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetKeywordDatasetHeaders>> GetKeywordDatasetWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the specified keyword.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the keyword.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, DeleteKeywordDatasetHeaders>> DeleteKeywordDatasetWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the mutable details of the keyword dataset identified by
        /// its ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the keyword dataset.
        /// </param>
        /// <param name='datasetUpdate'>
        /// The updated values for the keyword dataset.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateKeywordDatasetHeaders>> UpdateKeywordDatasetWithHttpMessagesAsync(System.Guid id, KeywordDatasetUpdate datasetUpdate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of supported locales for keywords.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetKeywordSupportedLocalesForDatasetsHeaders>> GetKeywordSupportedLocalesForDatasetsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of keywords for specified project.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the project.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetKeywordDatasetsForProjectHeaders>> GetKeywordDatasetsForProjectWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the files of the keyword identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the keyword.
        /// </param>
        /// <param name='sasValidity'>
        /// The length of time in seconds that an SAS url should be valid.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetKeywordDatasetFilesHeaders>> GetKeywordDatasetFilesWithHttpMessagesAsync(System.Guid id, int? sasValidity = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new keyword.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,CreateKeywordDatasetHeaders>> CreateKeywordDatasetWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of keyword model details.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetKeywordModelsHeaders>> GetKeywordModelsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new keyword model object.
        /// </summary>
        /// <param name='modelDefinition'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, CreateKeywordModelHeaders>> CreateKeywordModelWithHttpMessagesAsync(KeywordModelDefinition modelDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets specified keyword model details.
        /// </summary>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetKeywordModelHeaders>> GetKeywordModelWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the keyword model with the given id.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the keyword model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, DeleteKeywordModelHeaders>> DeleteKeywordModelWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the metadata of the keyword model identified by the given
        /// ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the keyword model.
        /// </param>
        /// <param name='modelUpdate'>
        /// The updated values for the keyword model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateKeywordModelHeaders>> UpdateKeywordModelWithHttpMessagesAsync(System.Guid id, ModelUpdate modelUpdate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of supported locales for keyword models.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetKeywordSupportedLocalesForModelsHeaders>> GetKeywordSupportedLocalesForModelsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the files of the keyword model identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the keyword model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetKeywordModelFilesHeaders>> GetKeywordModelFilesWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of keyword models for specified project.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the project.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetKeywordModelsForProjectHeaders>> GetKeywordModelsForProjectWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the accuracy test identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the accuracy test.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetAccuracyTestHeaders>> GetAccuracyTestWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the accuracy test identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the accuracy test.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, DeleteAccuracyTestHeaders>> DeleteAccuracyTestWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the mutable details of the test identified by its id.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the accuracy test.
        /// </param>
        /// <param name='testUpdate'>
        /// The object containing the updated fields of the test.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateAccuracyTestHeaders>> UpdateAccuracyTestWithHttpMessagesAsync(System.Guid id, TestUpdate testUpdate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of supported locales for accuracy tests.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetSupportedLocalesForAccuracyTestsHeaders>> GetSupportedLocalesForAccuracyTestsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of accuracy tests for the authenticated subscription.
        /// </summary>
        /// <param name='skip'>
        /// Number of tests that will be skipped.
        /// </param>
        /// <param name='top'>
        /// Number of tests that will be included after skipping.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetAccuracyTestsHeaders>> GetAccuracyTestsWithHttpMessagesAsync(int? skip = default(int?), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new accuracy test.
        /// </summary>
        /// <param name='testDefinition'>
        /// The details of the new accuracy test.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,CreateAccuracyTestHeaders>> CreateAccuracyTestWithHttpMessagesAsync(AccuracyTest testDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets one specific file (identified with fileId) from an accuracy
        /// test (identified with id).
        /// </summary>
        /// <param name='id'>
        /// The identifier of the accuracy test.
        /// </param>
        /// <param name='fileId'>
        /// The identifier of the file.
        /// </param>
        /// <param name='sasValidity'>
        /// The length of time in seconds that an SAS url should be valid.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetAccuracyTestFileHeaders>> GetAccuracyTestFileWithHttpMessagesAsync(System.Guid id, System.Guid fileId, int? sasValidity = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the files of the accuracy test identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the accuracy test.
        /// </param>
        /// <param name='sasValidity'>
        /// The length of time in seconds that an SAS url should be valid.
        /// </param>
        /// <param name='skip'>
        /// Number of files that will be skipped.
        /// </param>
        /// <param name='top'>
        /// Number of files that will be included after skipping.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetAccuracyTestFilesHeaders>> GetAccuracyTestFilesWithHttpMessagesAsync(System.Guid id, int? sasValidity = default(int?), int? skip = default(int?), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets status of the specified dataset.
        /// </summary>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetDatasetFromDonationHeaders>> GetDatasetFromDonationWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create dataset from donation data.
        /// </summary>
        /// <param name='internalDatasetFromDonationDefinition'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, CreateDatasetFromDonationHeaders>> CreateDatasetFromDonationWithHttpMessagesAsync(InternalDataImportFromDonationDefinition internalDatasetFromDonationDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the dataset identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the dataset.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetDatasetHeaders>> GetDatasetWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the specified dataset.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the dataset.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, DeleteDatasetHeaders>> DeleteDatasetWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the mutable details of the dataset identified by its ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the dataset.
        /// </param>
        /// <param name='datasetUpdate'>
        /// The updated values for the dataset.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateDatasetHeaders>> UpdateDatasetWithHttpMessagesAsync(System.Guid id, DatasetUpdate datasetUpdate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of supported locales for data imports.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetSupportedLocalesForDatasetsHeaders>> GetSupportedLocalesForDatasetsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of datasets for the authenticated subscription.
        /// </summary>
        /// <param name='skip'>
        /// Number of datasets that will be skipped.
        /// </param>
        /// <param name='top'>
        /// Number of datasets that will be included after skipping.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetDatasetsHeaders>> GetDatasetsWithHttpMessagesAsync(int? skip = default(int?), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Uploads and creates a new dataset by getting the data from a
        /// specified URL.
        /// </summary>
        /// <param name='dataset'>
        /// Definition for the new dataset.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,CreateDatasetHeaders>> CreateDatasetWithHttpMessagesAsync(Dataset dataset, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets one specific file (identified with fileId) from a dataset
        /// (identified with id).
        /// </summary>
        /// <param name='id'>
        /// The identifier of the dataset.
        /// </param>
        /// <param name='fileId'>
        /// The identifier of the file.
        /// </param>
        /// <param name='sasValidity'>
        /// The length of time in seconds that an SAS url should be valid.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetDatasetFileHeaders>> GetDatasetFileWithHttpMessagesAsync(System.Guid id, System.Guid fileId, int? sasValidity = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the files of the dataset identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the dataset.
        /// </param>
        /// <param name='sasValidity'>
        /// The length of time in seconds that an SAS url should be valid.
        /// </param>
        /// <param name='skip'>
        /// Number of files that will be skipped.
        /// </param>
        /// <param name='top'>
        /// Number of files that will be included after skipping.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetDatasetFilesHeaders>> GetDatasetFilesWithHttpMessagesAsync(System.Guid id, int? sasValidity = default(int?), int? skip = default(int?), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Uploads data and creates a new dataset.
        /// </summary>
        /// <param name='projectId'>
        /// The optional string representation of a project ID. If set, the
        /// dataset will be associated with that project.
        /// </param>
        /// <param name='name'>
        /// The name of this data import (always add this string for any
        /// import).
        /// </param>
        /// <param name='description'>
        /// Optional description of this data import.
        /// </param>
        /// <param name='locale'>
        /// The locale of this data import (always add this string for any
        /// import).
        /// </param>
        /// <param name='dataImportKind'>
        /// The kind of the data import (always add this string for any
        /// import). Possible values include: 'None', 'Language', 'Acoustic',
        /// 'Pronunciation', 'CustomVoice', 'AudioFiles',
        /// 'KeywordAudioTranscript'
        /// </param>
        /// <param name='properties'>
        /// Optional properties of this data import (json serialized object
        /// with key/values, where all values must be strings)
        /// </param>
        /// <param name='audiodata'>
        /// A zip file containing the audio data and a text file containing the
        /// transcriptions for the audio data (only this file for acoustic data
        /// imports).
        /// </param>
        /// <param name='languagedata'>
        /// A text file containing the language or pronunciation data (only
        /// this file for language data imports).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UploadDatasetFromFormHeaders>> UploadDatasetFromFormWithHttpMessagesAsync(string projectId = default(string), string name = default(string), string description = default(string), string locale = default(string), string dataImportKind = default(string), string properties = default(string), Stream audiodata = default(Stream), Stream languagedata = default(Stream), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the endpoint identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the endpoint.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetEndpointHeaders>> GetEndpointWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the endpoint identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the endpoint.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, DeleteEndpointHeaders>> DeleteEndpointWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the metadata of the endpoint identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the endpoint.
        /// </param>
        /// <param name='endpointUpdate'>
        /// The updated values for the endpoint.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateEndpointHeaders>> UpdateEndpointWithHttpMessagesAsync(System.Guid id, EndpointUpdate endpointUpdate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of supported locales for endpoint creations.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetSupportedLocalesForEndpointsHeaders>> GetSupportedLocalesForEndpointsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of endpoints for the authenticated subscription.
        /// </summary>
        /// <param name='skip'>
        /// Number of endpoints that will be skipped.
        /// </param>
        /// <param name='top'>
        /// Number of endpoints that will be included after skipping.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetEndpointsHeaders>> GetEndpointsWithHttpMessagesAsync(int? skip = default(int?), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new endpoint.
        /// </summary>
        /// <param name='endpoint'>
        /// The details of the endpoint.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,CreateEndpointHeaders>> CreateEndpointWithHttpMessagesAsync(Endpoint endpoint, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns an endpoint manifest which can be used in an on-premise
        /// container.
        /// </summary>
        /// <param name='modelId'>
        /// The ID of the model to generate an endpoint manifest for.
        /// </param>
        /// <param name='sasValidity'>
        /// The length of time in seconds that an SAS url should be valid.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, CreateEndpointManifestHeaders>> CreateEndpointManifestWithHttpMessagesAsync(System.Guid modelId, int? sasValidity = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a specific audio or transcription log for a given endpoint.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the endpoint.
        /// </param>
        /// <param name='logId'>
        /// The identifier of the log.
        /// </param>
        /// <param name='sasValidity'>
        /// The length of time in seconds that an SAS url should be valid.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetEndpointLogHeaders>> GetEndpointLogWithHttpMessagesAsync(System.Guid id, string logId, int? sasValidity = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes one audio or transcription log that have been stored for a
        /// given endpoint.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the endpoint.
        /// </param>
        /// <param name='logId'>
        /// The identifier of the log.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,DeleteEndpointLogHeaders>> DeleteEndpointLogWithHttpMessagesAsync(System.Guid id, string logId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a specific audio or transcription log for the default base
        /// model in a given language.
        /// </summary>
        /// <param name='locale'>
        /// The language used to select the default base model.
        /// </param>
        /// <param name='logId'>
        /// The identifier of the log.
        /// </param>
        /// <param name='sasValidity'>
        /// The length of time in seconds that an SAS url should be valid.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetBaseModelLogHeaders>> GetBaseModelLogWithHttpMessagesAsync(string locale, string logId, int? sasValidity = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes one audio or transcription log that have been stored when
        /// using the default base model of a given language.
        /// </summary>
        /// <param name='locale'>
        /// The language used to select the default base model.
        /// </param>
        /// <param name='logId'>
        /// The identifier of the log.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, DeleteBaseModelLogHeaders>> DeleteBaseModelLogWithHttpMessagesAsync(string locale, string logId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of audio and transcription logs that have been stored
        /// for a given endpoint on a specific day, month, or year.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the endpoint.
        /// </param>
        /// <param name='date'>
        /// The date of the logs (specific year, month, or day, UTC).
        /// Expected format: ""yyyy", "yyyy-mm", or "yyyy-mm-dd" (e.g. "2020",
        /// "2020-01", or "2020-01-13").
        /// Gets all logs when date is not specified.
        /// </param>
        /// <param name='sasValidity'>
        /// The length of time in seconds that an SAS url should be valid.
        /// </param>
        /// <param name='skipToken'>
        /// Token to skip logs that were already retrieved in previous
        /// requests. Pagination starts from beginning when not defined.
        /// </param>
        /// <param name='top'>
        /// Number of files that will be included (between 1 and 5000).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetEndpointLogsHeaders>> GetEndpointLogsWithHttpMessagesAsync(System.Guid id, string date = default(string), int? sasValidity = default(int?), string skipToken = default(string), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the audio and transcription logs that have been stored for
        /// a given endpoint on a specific day, month, or year.
        /// </summary>
        /// <remarks>
        /// Deletion will happen in the background and can take up to a day.
        /// </remarks>
        /// <param name='id'>
        /// The identifier of the endpoint.
        /// </param>
        /// <param name='date'>
        /// The date of the logs to delete (specific year, month, or day, UTC).
        /// Expected format: ""yyyy", "yyyy-mm", or "yyyy-mm-dd" (e.g. "2020",
        /// "2020-01", or "2020-01-13").
        /// Deletes all logs when date is not specified.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, DeleteEndpointLogsHeaders>> DeleteEndpointLogsWithHttpMessagesAsync(System.Guid id, string date = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of audio and transcription logs that have been stored
        /// when using the default base model of a given language on a specific
        /// day, month, or year.
        /// </summary>
        /// <param name='locale'>
        /// The language used to select the default base model.
        /// </param>
        /// <param name='date'>
        /// The date of the logs (specific year, month, or day, UTC).
        /// Expected format: ""yyyy", "yyyy-mm", or "yyyy-mm-dd" (e.g. "2020",
        /// "2020-01", or "2020-01-13").
        /// Gets all logs when date is not specified.
        /// </param>
        /// <param name='sasValidity'>
        /// The length of time in seconds that an SAS url should be valid.
        /// </param>
        /// <param name='skipToken'>
        /// Token to skip logs that were already retrieved in previous
        /// requests. Pagination starts from beginning when not defined.
        /// </param>
        /// <param name='top'>
        /// Number of files that will be included (between 1 and 5000).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetBaseModelLogsHeaders>> GetBaseModelLogsWithHttpMessagesAsync(string locale, string date = default(string), int? sasValidity = default(int?), string skipToken = default(string), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the audio and transcription logs that have been stored when
        /// using the default base model of a given language on a specific day,
        /// month, or year.
        /// </summary>
        /// <remarks>
        /// Deletion will happen in the background and can take up to a day.
        /// </remarks>
        /// <param name='locale'>
        /// The language used to select the default base model.
        /// </param>
        /// <param name='date'>
        /// The date of the logs to delete (specific year, month, or day, UTC).
        /// Expected format: ""yyyy", "yyyy-mm", or "yyyy-mm-dd" (e.g. "2020",
        /// "2020-01", or "2020-01-13").
        /// Deletes all logs when date is not specified.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, DeleteBaseModelLogsHeaders>> DeleteBaseModelLogsWithHttpMessagesAsync(string locale, string date = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the model identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetModelHeaders>> GetModelWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the model identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, DeleteModelHeaders>> DeleteModelWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the metadata of the model identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the model.
        /// </param>
        /// <param name='modelUpdate'>
        /// The updated values for the model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, UpdateModelHeaders>> UpdateModelWithHttpMessagesAsync(System.Guid id, ModelUpdate modelUpdate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of supported locales for model adaptation.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetSupportedLocalesForModelsHeaders>> GetSupportedLocalesForModelsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the base model identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the base model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, GetBaseModelHeaders>> GetBaseModelWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of custom models for the authenticated subscription.
        /// </summary>
        /// <param name='skip'>
        /// Number of models that will be skipped.
        /// </param>
        /// <param name='top'>
        /// Number of models that will be included after skipping.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, GetModelsHeaders>> GetModelsWithHttpMessagesAsync(int? skip = default(int?), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new model.
        /// </summary>
        /// <param name='modelDefinition'>
        /// The details of the new model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, CreateModelHeaders>> CreateModelWithHttpMessagesAsync(Model modelDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of base models for the authenticated subscription.
        /// </summary>
        /// <param name='skip'>
        /// Number of models that will be skipped.
        /// </param>
        /// <param name='top'>
        /// Number of models that will be included after skipping.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, GetBaseModelsHeaders>> GetBaseModelsWithHttpMessagesAsync(int? skip = default(int?), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Copies a model from one subscription to another.
        /// </summary>
        /// <remarks>
        /// This method can be used to copy a model from one location to
        /// another. If the target subcription
        /// key belongs to a subscription created for another location, the
        /// model will be copied to that location.
        /// The location header in the response will direct to the model in the
        /// target location.
        /// </remarks>
        /// <param name='id'>
        /// The identifier of the model that will be copied.
        /// </param>
        /// <param name='modelCopyDefinition'>
        /// The body contains the subscription key of the target subscription.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, CopyModelHeaders>> CopyModelWithHttpMessagesAsync(System.Guid id, ModelCopy modelCopyDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the project identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the project.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, GetProjectHeaders>> GetProjectWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the project identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the project.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,DeleteProjectHeaders>> DeleteProjectWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the project identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the project.
        /// </param>
        /// <param name='projectUpdate'>
        /// The updated values for the project.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, UpdateProjectHeaders>> UpdateProjectWithHttpMessagesAsync(System.Guid id, ProjectUpdate projectUpdate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of supported locales.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetSupportedProjectLocalesHeaders>> GetSupportedProjectLocalesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of projects for the authenticated subscription.
        /// </summary>
        /// <param name='skip'>
        /// Number of models that will be skipped.
        /// </param>
        /// <param name='top'>
        /// Number of models that will be included after skipping.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, GetProjectsHeaders>> GetProjectsWithHttpMessagesAsync(int? skip = default(int?), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new project.
        /// </summary>
        /// <param name='projectDefinition'>
        /// The details of the project.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, CreateProjectHeaders>> CreateProjectWithHttpMessagesAsync(Project projectDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of models for specified project.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the project.
        /// </param>
        /// <param name='skip'>
        /// Number of models that will be skipped.
        /// </param>
        /// <param name='top'>
        /// Number of models that will be included after skipping.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, GetModelsForProjectHeaders>> GetModelsForProjectWithHttpMessagesAsync(System.Guid id, int? skip = default(int?), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of datasets for specified project.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the project.
        /// </param>
        /// <param name='skip'>
        /// Number of datasets that will be skipped.
        /// </param>
        /// <param name='top'>
        /// Number of datasets that will be included after skipping.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetDatasetsForProjectHeaders>> GetDatasetsForProjectWithHttpMessagesAsync(System.Guid id, int? skip = default(int?), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of endpoints for specified project.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the project.
        /// </param>
        /// <param name='skip'>
        /// Number of endpoints that will be skipped.
        /// </param>
        /// <param name='top'>
        /// Number of endpoints that will be included after skipping.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetEndpointsForProjectHeaders>> GetEndpointsForProjectWithHttpMessagesAsync(System.Guid id, int? skip = default(int?), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of accuracy tests for specified project.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the project.
        /// </param>
        /// <param name='skip'>
        /// Number of tests that will be skipped.
        /// </param>
        /// <param name='top'>
        /// Number of tests that will be included after skipping.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetAccuracyTestsForProjectHeaders>> GetAccuracyTestsForProjectWithHttpMessagesAsync(System.Guid id, int? skip = default(int?), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of transcriptions for specified project.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the project.
        /// </param>
        /// <param name='skip'>
        /// Number of transcriptions that will be skipped.
        /// </param>
        /// <param name='top'>
        /// Number of transcriptions that will be included after skipping.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, GetTranscriptionsForProjectHeaders>> GetTranscriptionsForProjectWithHttpMessagesAsync(System.Guid id, int? skip = default(int?), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the transcription identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the transcription.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, GetTranscriptionHeaders>> GetTranscriptionWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the specified transcription task.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the transcription.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,DeleteTranscriptionHeaders>> DeleteTranscriptionWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the mutable details of the transcription identified by its
        /// ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the transcription.
        /// </param>
        /// <param name='transcriptionUpdate'>
        /// The updated values for the transcription.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, UpdateTranscriptionHeaders>> UpdateTranscriptionWithHttpMessagesAsync(System.Guid id, TranscriptionUpdate transcriptionUpdate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of supported locales for offline transcriptions.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetSupportedLocalesForTranscriptionsHeaders>> GetSupportedLocalesForTranscriptionsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of transcriptions for the authenticated subscription.
        /// </summary>
        /// <param name='skip'>
        /// Number of transcriptions that will be skipped.
        /// </param>
        /// <param name='top'>
        /// Number of transcriptions that will be included after skipping.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, GetTranscriptionsHeaders>> GetTranscriptionsWithHttpMessagesAsync(int? skip = default(int?), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new transcription.
        /// </summary>
        /// <param name='transcription'>
        /// The details of the new transcription.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, CreateTranscriptionHeaders>> CreateTranscriptionWithHttpMessagesAsync(Transcription transcription, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets one specific file (identified with fileId) from a
        /// transcription (identified with id).
        /// </summary>
        /// <param name='id'>
        /// The identifier of the transcription.
        /// </param>
        /// <param name='fileId'>
        /// The identifier of the file.
        /// </param>
        /// <param name='sasValidity'>
        /// The length of time in seconds that an SAS url should be valid.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetTranscriptionFileHeaders>> GetTranscriptionFileWithHttpMessagesAsync(System.Guid id, System.Guid fileId, int? sasValidity = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the files of the transcription identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the transcription.
        /// </param>
        /// <param name='sasValidity'>
        /// The length of time in seconds that an SAS url should be valid.
        /// </param>
        /// <param name='skip'>
        /// Number of files that will be skipped.
        /// </param>
        /// <param name='top'>
        /// Number of files that will be included after skipping.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetTranscriptionFilesHeaders>> GetTranscriptionFilesWithHttpMessagesAsync(System.Guid id, int? sasValidity = default(int?), int? skip = default(int?), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the web hook registration identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the web hook.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, GetHookHeaders>> GetHookWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the web hook registration identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the web hook.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, DeleteHookHeaders>> DeleteHookWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the web hook registration identified by the given ID.
        /// </summary>
        /// <remarks>
        /// If the property secret in the configuration is omitted or contains
        /// an empty string, future callbacks won't contain
        /// X-MicrosoftSpeechServices-Signature
        /// headers. If the property contains a non-empty string, it will be
        /// used to create a SHA256 hash of the payload with the secret as HMAC
        /// key. This hash
        /// will be set as X-MicrosoftSpeechServices-Signature header when
        /// calling back into the registered URL.
        ///
        /// If the property active is false, no more callbacks to the web hook
        /// are made, but the registration remains. Sending a request with the
        /// property
        /// being true, the service will resume calling back into the
        /// registered URL.
        /// </remarks>
        /// <param name='id'>
        /// The identifier of the web hook.
        /// </param>
        /// <param name='webHookUpdate'>
        /// The updated values for the web hook.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, UpdateHookHeaders>> UpdateHookWithHttpMessagesAsync(System.Guid id, WebHookUpdate webHookUpdate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of web hook registrations for the authenticated
        /// subscription.
        /// </summary>
        /// <param name='skip'>
        /// Number of hooks that will be skipped.
        /// </param>
        /// <param name='top'>
        /// Number of hooks that will be included after skipping.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, GetHooksHeaders>> GetHooksWithHttpMessagesAsync(int? skip = default(int?), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new web hook registration.
        /// </summary>
        /// <remarks>
        /// If the property secret in the configuration is present and contains
        /// a non-empty string, it will be used to create a SHA256 hash of the
        /// payload with
        /// the secret as HMAC key. This hash will be set as
        /// X-MicrosoftSpeechServices-Signature header when calling back into
        /// the registered URL.
        ///
        /// When calling back into the registered URL, the request will contain
        /// a X-MicrosoftSpeechServices-Event header containing one of the
        /// registered event
        /// types. There will be one request per registered event type.
        ///
        /// After successfully registering the web hook, a request with the
        /// event type ping will be made. The payload is of the same type as
        /// the response type
        /// of this request.
        /// </remarks>
        /// <param name='webHookDefinition'>
        /// The details of the new web hook.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,CreateHookHeaders>> CreateHookWithHttpMessagesAsync(WebHook webHookDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sends a ping event to the registered URL.
        /// </summary>
        /// <remarks>
        /// The request body of the POST request sent to the registered web
        /// hook URL is of the same shape as in the GET request for a specific
        /// hook.
        /// The Swagger Schema ID of the model is WebHookV3.
        ///
        /// The request will contain a X-MicrosoftSpeechServices-Event header
        /// with the value ping. If the web hook was registered with
        /// a secret it will contain a X-MicrosoftSpeechServices-Signature
        /// header with an SHA256 hash of the payload with
        /// the secret as HMAC key. The hash is base64 encoded.
        /// </remarks>
        /// <param name='id'>
        /// The identifier of the web hook to ping.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,PingHookHeaders>> PingHookWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sends a request for each registered event type to the registered
        /// URL.
        /// </summary>
        /// <remarks>
        /// The payload will be generated from the last entity that would have
        /// invoked the web hook. If no entity is present for none of the
        /// registered event types,
        /// the POST will respond with 204. If a test request can be made, it
        /// will respond with 200.
        /// The request will contain a X-MicrosoftSpeechServices-Event header
        /// with the respective registered event type.
        /// If the web hook was registered with a secret it will contain a
        /// X-MicrosoftSpeechServices-Signature header with an SHA256 hash of
        /// the payload with
        /// the secret as HMAC key. The hash is base64 encoded.
        /// </remarks>
        /// <param name='id'>
        /// The identifier of the web hook to ping.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, TestHookHeaders>> TestHookWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='timeoutMinutes'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, GetTimeoutExportAudioTaskIdsHeaders>> GetTimeoutExportAudioTaskIdsWithHttpMessagesAsync(int timeoutMinutes, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of projects for the authenticated subscription.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, GetVoiceProjectsHeaders>> GetVoiceProjectsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new project.
        /// </summary>
        /// <param name='projectDefinition'>
        /// The details of the project.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, CreateVoiceProjectHeaders>> CreateVoiceProjectWithHttpMessagesAsync(ProjectDefinition projectDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the project identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the project.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, GetVoiceProjectHeaders>> GetVoiceProjectWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the project identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the project.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, DeleteVoiceProjectHeaders>> DeleteVoiceProjectWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the project identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the project.
        /// </param>
        /// <param name='projectUpdate'>
        /// The updated values for the project.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, UpdateVoiceProjectHeaders>> UpdateVoiceProjectWithHttpMessagesAsync(System.Guid id, ProjectUpdate projectUpdate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of supported locales.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetSupportedVoiceProjectLocalesHeaders>> GetSupportedVoiceProjectLocalesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of projects for the authenticated subscription.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, GetKeywordProjectsHeaders>> GetKeywordProjectsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new project.
        /// </summary>
        /// <param name='projectDefinition'>
        /// The details of the project.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, CreateKeywordProjectHeaders>> CreateKeywordProjectWithHttpMessagesAsync(ProjectDefinition projectDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the project identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the project.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, GetKeywordProjectHeaders>> GetKeywordProjectWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the project identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the project.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, DeleteKeywordProjectHeaders>> DeleteKeywordProjectWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the project identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the project.
        /// </param>
        /// <param name='projectUpdate'>
        /// The updated values for the project.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, UpdateKeywordProjectHeaders>> UpdateKeywordProjectWithHttpMessagesAsync(System.Guid id, ProjectUpdate projectUpdate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of supported locales.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetSupportedKeywordProjectLocalesHeaders>> GetSupportedKeywordProjectLocalesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Searches speech logs by parameters.
        /// </summary>
        /// <param name='searchParameters'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, SearchLogsHeaders>> SearchLogsWithHttpMessagesAsync(AnalyticsSearchQuery searchParameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates summary of speech logs by parameters.
        /// </summary>
        /// <param name='summaryParameters'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, CreateLogsSummaryHeaders>> CreateLogsSummaryWithHttpMessagesAsync(AnalyticsSummaryParameters summaryParameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the specified endpoint data export task for the authenticated
        /// user.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the data export.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, GetEndpointDataExportHeaders>> GetEndpointDataExportWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the endpoint data export task identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the endpoint data export.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, DeleteEndpointDataExportHeaders>> DeleteEndpointDataExportWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the specified donation task for the authenticated user.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the donation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, GetDataCollectionDonationHeaders>> GetDataCollectionDonationWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the donation task identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the donation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, DeleteDataCollectionDonationHeaders>> DeleteDataCollectionDonationWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update mutable details of a donation task.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the donation.
        /// </param>
        /// <param name='donationUpdate'>
        /// The object containing the updated fields of the donation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateDataCollectionDonationHeaders>> UpdateDataCollectionDonationWithHttpMessagesAsync(System.Guid id, DataCollectionDonationUpdate donationUpdate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='skip'>
        /// Number of exports that will be skipped.
        /// </param>
        /// <param name='top'>
        /// Number of exports that will be included after skipping.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetAllEndpointDataExportsHeaders>> GetAllEndpointDataExportsWithHttpMessagesAsync(int? skip = default(int?), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new endpoint data export task.
        /// </summary>
        /// <param name='endpointDataDefinition'>
        /// The details of the new endpoint data export.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,CreateEndpointDataExportHeaders>> CreateEndpointDataExportWithHttpMessagesAsync(EndpointDataDefinition endpointDataDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of donation tasks for the authenticated user.
        /// </summary>
        /// <param name='skip'>
        /// Number of data donations that will be skipped.
        /// </param>
        /// <param name='top'>
        /// Number of data donations that will be included after skipping.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetDataCollectionDonationsHeaders>> GetDataCollectionDonationsWithHttpMessagesAsync(int? skip = default(int?), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new donation task.
        /// </summary>
        /// <param name='donationDefinition'>
        /// The details of the new donation task.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,CreateDataCollectionDonationHeaders>> CreateDataCollectionDonationWithHttpMessagesAsync(DataCollectionDonationDefinition donationDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of data collections for specified project.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the project.
        /// </param>
        /// <param name='skip'>
        /// Number of exports that will be skipped.
        /// </param>
        /// <param name='top'>
        /// Number of exports that will be included after skipping.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetEndpointDataExportsForProjectHeaders>> GetEndpointDataExportsForProjectWithHttpMessagesAsync(System.Guid id, int? skip = default(int?), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of endpoint data export tasks of default model for
        /// the specified locale.
        /// </summary>
        /// <param name='locale'>
        /// Locale of the default model.
        /// </param>
        /// <param name='skip'>
        /// Number of exports that will be skipped.
        /// </param>
        /// <param name='top'>
        /// Number of exports that will be included after skipping.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetBaseModelDataExportsHeaders>> GetBaseModelDataExportsWithHttpMessagesAsync(string locale, int? skip = default(int?), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the transcriptions and captured audio files associated with
        /// base model in given locale.
        /// </summary>
        /// <remarks>
        /// Deletion will happen in the background and can take up to a day.
        /// </remarks>
        /// <param name='locale'>
        /// The locale of the endpoint.
        /// </param>
        /// <param name='start'>
        /// Gets or sets start time of the logs to be deleted. Delete from
        /// beginning of logs when not set.
        /// Sample value: "2019-09-23T00:00:00Z".
        /// </param>
        /// <param name='end'>
        /// End time of the logs to be deleted. Delete to the end of logs when
        /// not set.
        /// Sample value: "2019-09-23T00:00:00Z".
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, DeleteDefaultBaseModelEndpointAudioLogHeaders>> DeleteDefaultBaseModelEndpointAudioLogWithHttpMessagesAsync(string locale, System.DateTime? start = default(System.DateTime?), System.DateTime? end = default(System.DateTime?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of endpoint data export tasks for the authenticated
        /// user.
        /// </summary>
        /// <param name='endpointId'>
        /// The identifier of the endpoint.
        /// </param>
        /// <param name='skip'>
        /// Number of exports that will be skipped.
        /// </param>
        /// <param name='top'>
        /// Number of exports that will be included after skipping.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetEndpointDataExportsHeaders>> GetEndpointDataExportsWithHttpMessagesAsync(System.Guid endpointId, int? skip = default(int?), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the transcriptions and captured audio files associated with
        /// the custom endpoint identified by the given ID from start time to
        /// end time.
        /// </summary>
        /// <remarks>
        /// Deletion will happen in the background and can take up to a day.
        /// </remarks>
        /// <param name='endpointId'>
        /// The identifier of the endpoint.
        /// </param>
        /// <param name='start'>
        /// Gets or sets start time of the logs to be deleted. Delete from
        /// beginning of logs when not set.
        /// Sample value: "2019-09-23T00:00:00Z".
        /// </param>
        /// <param name='end'>
        /// End time of the logs to be deleted. Delete to the end of logs when
        /// not set.
        /// Sample value: "2019-09-23T00:00:00Z".
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, DeleteEndpointAudioLogHeaders>> DeleteEndpointAudioLogWithHttpMessagesAsync(System.Guid endpointId, System.DateTime? start = default(System.DateTime?), System.DateTime? end = default(System.DateTime?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets one specific file (identified with fileId) from an data
        /// collection (identified with id).
        /// </summary>
        /// <param name='id'>
        /// The identifier of the accuracy test.
        /// </param>
        /// <param name='fileId'>
        /// The identifier of the file.
        /// </param>
        /// <param name='sasValidity'>
        /// The length of time in seconds that an SAS url should be valid.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetDataCollectionFileHeaders>> GetDataCollectionFileWithHttpMessagesAsync(System.Guid id, System.Guid fileId, int? sasValidity = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the files of the data collection identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the data collection.
        /// </param>
        /// <param name='sasValidity'>
        /// The length of time in seconds that an SAS url should be valid.
        /// </param>
        /// <param name='skip'>
        /// Number of files that will be skipped.
        /// </param>
        /// <param name='top'>
        /// Number of files that will be included after skipping.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetDataCollectionFilesHeaders>> GetDataCollectionFilesWithHttpMessagesAsync(System.Guid id, int? sasValidity = default(int?), int? skip = default(int?), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Download ssml tuning metadata.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, QueryTuneMetadataHeaders>> QueryTuneMetadataWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Query exported audio files.
        /// </summary>
        /// <param name='group'>
        /// Possible values include: 'None', 'VipUsers', 'InternalPartnerUsers'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,IsCurrentSubscriptionInGroupHeaders>> IsCurrentSubscriptionInGroupWithHttpMessagesAsync(string group, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Tuning feature: Change speaking rate for selected text.
        /// </summary>
        /// <param name='tuneDefinition'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,TuneHeaders>> TuneWithHttpMessagesAsync(TuneDefinitionV3 tuneDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Speak API.
        /// </summary>
        /// <param name='speakDefinition'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,SpeakHeaders>> SpeakWithHttpMessagesAsync(SpeakDefinitionV3 speakDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets voices info belong to current sub.
        /// </summary>
        /// <param name='queryConditions'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, QueryVoicesHeaders>> QueryVoicesWithHttpMessagesAsync(QueryVoiceDefinition queryConditions, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Tuning feature: Change speaking rate for selected text.
        /// </summary>
        /// <param name='tuneDefinitions'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,MultiTuneHeaders>> MultiTuneWithHttpMessagesAsync(IList<TuneDefinitionV3> tuneDefinitions, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Split ssml.
        /// </summary>
        /// <param name='splitSsmlsDefinition'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,SplitSsmlsHeaders>> SplitSsmlsWithHttpMessagesAsync(SplitSsmlDefinitionV3 splitSsmlsDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit task file.
        /// </summary>
        /// <param name='editFileDefinition'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, EditSsmlFileHeaders>> EditSsmlFileWithHttpMessagesAsync(EditVcgFileDefinitionV3 editFileDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Query word metadata API.
        /// </summary>
        /// <param name='speakMetadataDefinition'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,SpeakMetadataHeaders>> SpeakMetadataWithHttpMessagesAsync(SpeakMetadataDefinitionV3 speakMetadataDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit ssml folder.
        /// Relased customers:
        /// 1. Cortana.
        /// </summary>
        /// <param name='editFolderDefinition'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, EditSsmlFolderHeaders>> EditSsmlFolderWithHttpMessagesAsync(EditVcgFolderDefinitionV3 editFolderDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets tasks info belong to current sub.
        /// Relased customers:
        /// 1. Cortana.
        /// </summary>
        /// <param name='queryDefinition'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,QuerySsmlFilesHeaders>> QuerySsmlFilesWithHttpMessagesAsync(QuerySsmlFilesDefinitionV3 queryDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Query exported audio files.
        /// </summary>
        /// <param name='definition'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,QueryAudioFilesHeaders>> QueryAudioFilesWithHttpMessagesAsync(QueryAudioFileDefinition definition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Upload task files.
        /// Relased customers:
        /// 1. Cortana.
        /// </summary>
        /// <param name='uploadFilesDefinition'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UploadSsmlFilesHeaders>> UploadSsmlFilesWithHttpMessagesAsync(UploadVcgFilesDefinitionV3 uploadFilesDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create new folder.
        /// Relased customers:
        /// 1. Cortana.
        /// </summary>
        /// <param name='createFolderDefinition'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, CreateSsmlFolderHeaders>> CreateSsmlFolderWithHttpMessagesAsync(CreateSsmlFolderDefinition createFolderDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete voice audio files.
        /// </summary>
        /// <param name='voiceAudioIds'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, DeleteVoiceAudioFilesHeaders>> DeleteVoiceAudioFilesWithHttpMessagesAsync(IList<System.Guid?> voiceAudioIds, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Export ssml audio.
        /// </summary>
        /// <param name='exportDefinition'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ExportAudioFilesHeaders>> ExportAudioFilesWithHttpMessagesAsync(ExportAudioFilesDefinition exportDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Query langauge data.
        /// </summary>
        /// <param name='definition'>
        /// Request definition.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, LanguageMetadataHeaders>> LanguageMetadataWithHttpMessagesAsync(LanguageDataDefinitionV3 definition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete task recursively.
        /// </summary>
        /// <param name='taskIds'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, DeleteSsmlFolderOrFilesHeaders>> DeleteSsmlFolderOrFilesWithHttpMessagesAsync(IList<System.Guid?> taskIds, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Download tuning files.
        /// </summary>
        /// <param name='downloadDefinition'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,DownloadTuneSsmlAsZipHeaders>> DownloadTuneSsmlAsZipWithHttpMessagesAsync(DownloadVcgTuneDefinitionV3 downloadDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all voice datasets.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, GetVoiceDatasetsHeaders>> GetVoiceDatasetsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Uploads and creates a new dataset by getting the data from
        /// specified URLs.
        /// </summary>
        /// <remarks>
        /// LongAudio and AudioOnly dataset will leverage the batch
        /// transcription feature of speech-to-text.
        /// A standard subscription (S0) key is required if VoiceDatasetType is
        /// LongAudio or AudioOnly.
        /// </remarks>
        /// <param name='dataset'>
        /// Definition for the new dataset.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, CreateVoiceDatasetHeaders>> CreateVoiceDatasetWithHttpMessagesAsync(VoiceDatasetDefinition dataset, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets details about the specified dataset import.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the dataset import.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetVoiceDatasetHeaders>> GetVoiceDatasetWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the voice dataset with the given id.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the voice dataset.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, DeleteVoiceDatasetHeaders>> DeleteVoiceDatasetWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the mutable details of the voice dataset identified by its
        /// ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the voice dataset.
        /// </param>
        /// <param name='datasetUpdate'>
        /// The updated values for the voice dataset.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateVoiceDatasetHeaders>> UpdateVoiceDatasetWithHttpMessagesAsync(System.Guid id, VoiceDatasetUpdate datasetUpdate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of supported locales for custom voice data imports.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetSupportedLocalesForVoiceDatasetsHeaders>> GetSupportedLocalesForVoiceDatasetsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the list of datasets for specified project.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the project.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetVoiceDatasetsForProjectHeaders>> GetVoiceDatasetsForProjectWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get long audio data / audio only data import supported locales.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetSupportedLocalesForVoiceLongAudioDatasetsHeaders>> GetSupportedLocalesForVoiceLongAudioDatasetsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the files of the dataset identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the dataset.
        /// </param>
        /// <param name='sasValidity'>
        /// The length of time in seconds that an SAS url should be valid.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetVoiceDatasetFilesHeaders>> GetVoiceDatasetFilesWithHttpMessagesAsync(System.Guid id, int? sasValidity = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Uploads data and creates a new voice data object.
        /// </summary>
        /// <param name='projectId'>
        /// The optional string representation of a project ID. If set, the
        /// dataset will be associated with that project.
        /// </param>
        /// <param name='name'>
        /// The name of this data import (always add this string for any
        /// import).
        /// </param>
        /// <param name='description'>
        /// Optional description of this data import.
        /// </param>
        /// <param name='locale'>
        /// The locale of this data import (always add this string for any
        /// import).
        /// </param>
        /// <param name='dataImportKind'>
        /// The kind of the data import (always add this string for any
        /// import). Possible values include: 'None', 'Language', 'Acoustic',
        /// 'Pronunciation', 'CustomVoice', 'AudioFiles',
        /// 'KeywordAudioTranscript'
        /// </param>
        /// <param name='properties'>
        /// Optional properties of this data import (json serialized object
        /// with key/values, where all values must be strings)
        /// </param>
        /// <param name='audiodata'>
        /// A zip file containing the audio data.
        /// </param>
        /// <param name='transcriptions'>
        /// The transcriptions text file of the audio data.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, UploadVoiceDatasetHeaders>> UploadVoiceDatasetWithHttpMessagesAsync(string projectId = default(string), string name = default(string), string description = default(string), string locale = default(string), string dataImportKind = default(string), string properties = default(string), Stream audiodata = default(Stream), Stream transcriptions = default(Stream), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Upload voice dataset only with audio.
        /// This API is in currently in preview. It only accept subscription
        /// key authentication.
        /// Access token authentication is not supported and will get a bad
        /// request error.
        /// </summary>
        /// <param name='projectId'>
        /// The optional string representation of a project ID. If set, the
        /// dataset will be associated with that project.
        /// </param>
        /// <param name='name'>
        /// The name of this data import (always add this string for any
        /// import).
        /// </param>
        /// <param name='description'>
        /// Optional description of this data import.
        /// </param>
        /// <param name='locale'>
        /// The locale of this data import (always add this string for any
        /// import).
        /// </param>
        /// <param name='dataImportKind'>
        /// The kind of the data import (always add this string for any
        /// import). Possible values include: 'None', 'Language', 'Acoustic',
        /// 'Pronunciation', 'CustomVoice', 'AudioFiles',
        /// 'KeywordAudioTranscript'
        /// </param>
        /// <param name='properties'>
        /// Optional properties of this data import (json serialized object
        /// with key/values, where all values must be strings)
        /// </param>
        /// <param name='audiodata'>
        /// A zip of audio files (.wav or .mp3) without transcript. A
        /// transcription for each spoken utterance will be automatically
        /// generated.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, UploadVoiceAudioOnlyDatasetHeaders>> UploadVoiceAudioOnlyDatasetWithHttpMessagesAsync(string projectId = default(string), string name = default(string), string description = default(string), string locale = default(string), string dataImportKind = default(string), string properties = default(string), Stream audiodata = default(Stream), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Upload voice dataset with long audio and scripts.
        /// This API is in currently in preview. It only accept subscription
        /// key authentication.
        /// Access token authentication is not supported and will get a bad
        /// request error.
        /// </summary>
        /// <param name='projectId'>
        /// The optional string representation of a project ID. If set, the
        /// dataset will be associated with that project.
        /// </param>
        /// <param name='name'>
        /// The name of this data import (always add this string for any
        /// import).
        /// </param>
        /// <param name='description'>
        /// Optional description of this data import.
        /// </param>
        /// <param name='locale'>
        /// The locale of this data import (always add this string for any
        /// import).
        /// </param>
        /// <param name='dataImportKind'>
        /// The kind of the data import (always add this string for any
        /// import). Possible values include: 'None', 'Language', 'Acoustic',
        /// 'Pronunciation', 'CustomVoice', 'AudioFiles',
        /// 'KeywordAudioTranscript'
        /// </param>
        /// <param name='properties'>
        /// Optional properties of this data import (json serialized object
        /// with key/values, where all values must be strings)
        /// </param>
        /// <param name='audiodata'>
        /// A zip of long, unsegmented audio files. (.wav or .mp3) Audio file
        /// should have the same name with the paired transcript
        /// </param>
        /// <param name='transcriptions'>
        /// A zip of transcript text files. (.txt in UTF-8 encoding with a
        /// byte-order marker) Transcript file should have the same name with
        /// the paired audio file.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, UploadVoiceLongAudioDatasetHeaders>> UploadVoiceLongAudioDatasetWithHttpMessagesAsync(string projectId = default(string), string name = default(string), string description = default(string), string locale = default(string), string dataImportKind = default(string), string properties = default(string), Stream audiodata = default(Stream), Stream transcriptions = default(Stream), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of voice endpoint details.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetVoiceDeploymentsHeaders>> GetVoiceDeploymentsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new voice endpoint object.
        /// </summary>
        /// <param name='endpoint'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, CreateVoiceDeploymentHeaders>> CreateVoiceDeploymentWithHttpMessagesAsync(VoiceEndpointDefinitionV3 endpoint, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the details of a custom voice endpoint.
        /// </summary>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetVoiceDeploymentHeaders>> GetVoiceDeploymentWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete the specified voice endpoint.
        /// </summary>
        /// <param name='id'>
        /// The id of voice endpoint.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, DeleteDeploymentHeaders>> DeleteDeploymentWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the name and description of the endpoint identified by the
        /// given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the endpoint.
        /// </param>
        /// <param name='endpointUpdate'>
        /// The updated values for the endpoint.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateVoiceEndpointHeaders>> UpdateVoiceEndpointWithHttpMessagesAsync(System.Guid id, VoiceEndpointMetadataUpdate endpointUpdate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of supported locales for custom voice endpoints.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetSupportedLocalesForVoiceEndpointsHeaders>> GetSupportedLocalesForVoiceEndpointsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of endpoints for specified project.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the project.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetVoiceEndpointsForProjectHeaders>> GetVoiceEndpointsForProjectWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns an endpoint manifest which can be used in an on-premise
        /// container.
        /// </summary>
        /// <param name='modelId'>
        /// The ID of the model to generate an endpoint manifest for.
        /// </param>
        /// <param name='sasValidity'>
        /// The length of time in seconds that an SAS url should be valid.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, CreateVoiceEndpointManifestHeaders>> CreateVoiceEndpointManifestWithHttpMessagesAsync(System.Guid modelId, int? sasValidity = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets url of artifact.
        /// </summary>
        /// <param name='ids'>
        /// The identifier of the artifact.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetBlobEntitiesHeaders>> GetBlobEntitiesWithHttpMessagesAsync(IList<System.Guid?> ids, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the specified voice test.
        /// </summary>
        /// <param name='ids'>
        /// The identifiers of the voice general tasks.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, DeleteVoiceGeneralTasksHeaders>> DeleteVoiceGeneralTasksWithHttpMessagesAsync(IList<System.Guid?> ids, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Query general tasks.
        /// </summary>
        /// <param name='definition'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,QueryVcgExportAudioTasksHeaders>> QueryVcgExportAudioTasksWithHttpMessagesAsync(VcgExportAudioVoiceGeneralTaskQueryDefinition definition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of voice model details.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetVoiceModelsHeaders>> GetVoiceModelsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new voice model object.
        /// </summary>
        /// <param name='modelDefinition'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, CreateVoiceModelHeaders>> CreateVoiceModelWithHttpMessagesAsync(VoiceModelDefinitionV3 modelDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets specified voice model details.
        /// </summary>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetVoiceModelHeaders>> GetVoiceModelWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the voice model with the given id.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the voice model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, DeleteVoiceModelHeaders>> DeleteVoiceModelWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the metadata of the voice model identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the voice model.
        /// </param>
        /// <param name='modelUpdate'>
        /// The updated values for the voice model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateVoiceModelHeaders>> UpdateVoiceModelWithHttpMessagesAsync(System.Guid id, VoiceModelUpdate modelUpdate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of supported locales for custom voice models.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetSupportedLocalesForVoiceModelsHeaders>> GetSupportedLocalesForVoiceModelsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of models for specified project.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the project.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetVoiceModelsForProjectHeaders>> GetVoiceModelsForProjectWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Copies a model from one subscription to another.
        /// </summary>
        /// <remarks>
        /// This method can be used to copy a model from one location to
        /// another. If the target subcription
        /// key belongs to a subscription created for another location, the
        /// model will be copied to that location.
        /// The location header in the response will direct to the model in the
        /// target location.
        /// </remarks>
        /// <param name='id'>
        /// The identifier of the model that will be copied.
        /// </param>
        /// <param name='modelCopyDefinition'>
        /// The body contains the subscription key of the target subscription.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, CopyVoiceModelHeaders>> CopyVoiceModelWithHttpMessagesAsync(System.Guid id, ModelCopy modelCopyDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of voice synthesis under the selected subscription.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetVoiceSynthesesHeaders>> GetVoiceSynthesesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new synthesis.
        /// </summary>
        /// <param name='name'>
        /// The name information (always add this string for any voice
        /// synthesis).
        /// </param>
        /// <param name='description'>
        /// Optional description information
        /// </param>
        /// <param name='locale'>
        /// The locale information (always add this string for any voice
        /// synthesis).
        /// </param>
        /// <param name='model'>
        /// The model GUID information (always add this string for any voice
        /// synthesis).
        /// </param>
        /// <param name='properties'>
        /// Optional properties of this voice synthesis (json serialized object
        /// with key/values, where all values must be strings)
        /// </param>
        /// <param name='script'>
        /// The script text file of the voice synthesis.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, CreateVoiceSynthesisHeaders>> CreateVoiceSynthesisWithHttpMessagesAsync(string name = default(string), string description = default(string), string locale = default(string), string model = default(string), string properties = default(string), Stream script = default(Stream), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the voice synthesis identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the synthesis.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetVoiceSynthesisHeaders>> GetVoiceSynthesisWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the specified voice synthesis task.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the synthesis.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,DeleteVoiceSynthesisHeaders>> DeleteVoiceSynthesisWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the mutable details of the voice synthesis identified by
        /// its ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the voice synthesis.
        /// </param>
        /// <param name='voiceSynthesisUpdate'>
        /// The updated values for the voice synthesis.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateVoiceSynthesisHeaders>> UpdateVoiceSynthesisWithHttpMessagesAsync(System.Guid id, VoiceSynthesisUpdate voiceSynthesisUpdate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of supported voices for offline synthesis.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetSupportedVoicesForVoiceSynthesisHeaders>> GetSupportedVoicesForVoiceSynthesisWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of voice synthesis under the selected subscription with
        /// result paginated.
        /// </summary>
        /// <param name='skip'>
        /// </param>
        /// <param name='top'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetVoiceSynthesesPaginatedHeaders>> GetVoiceSynthesesPaginatedWithHttpMessagesAsync(int? skip = default(int?), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets details of all voice test under the selected subscription.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetVoiceTestsHeaders>> GetVoiceTestsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new voice test.
        /// </summary>
        /// <param name='voiceTestDefinition'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object, CreateVoiceTestHeaders>> CreateVoiceTestWithHttpMessagesAsync(VoiceTestDefinitionV3 voiceTestDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets detail of the specified voice test.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the voice test.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetVoiceTestHeaders>> GetVoiceTestWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the specified voice test.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the voice test.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,DeleteVoiceTestHeaders>> DeleteVoiceTestWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the metadata of the voice test identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the voice test.
        /// </param>
        /// <param name='testUpdate'>
        /// The updated values for the voice test.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateVoiceTestHeaders>> UpdateVoiceTestWithHttpMessagesAsync(System.Guid id, VoiceTestUpdate testUpdate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets details of the specified model's voice test.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the voice test.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetVoiceTestsForModelHeaders>> GetVoiceTestsForModelWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the list of voice tests for specified project.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the project.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetVoiceTestsForProjectHeaders>> GetVoiceTestsForProjectWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the files of the voice test identified by the given ID.
        /// </summary>
        /// <param name='id'>
        /// The identifier of the voice test.
        /// </param>
        /// <param name='sasValidity'>
        /// The length of time in seconds that an SAS url should be valid.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetVoiceTestFilesHeaders>> GetVoiceTestFilesWithHttpMessagesAsync(System.Guid id, int? sasValidity = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
